{
  "api/index.html": {
    "href": "api/index.html",
    "title": "APIs",
    "keywords": "APIs"
  },
  "api/NiTiS.Collections.Enumerable.html": {
    "href": "api/NiTiS.Collections.Enumerable.html",
    "title": "Class Enumerable",
    "keywords": "Class Enumerable Inheritance Object Enumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Collections Assembly : NiTiS.Collections.dll Syntax public static class Enumerable Methods | Improve this Doc View Source AppendAtBegin<T>(IEnumerable<T>, T) Declaration public static IEnumerable<T> AppendAtBegin<T>(this IEnumerable<T> this, T obj) Parameters Type Name Description IEnumerable <T> this T obj Returns Type Description IEnumerable <T> Type Parameters Name Description T | Improve this Doc View Source AppendRangeAtBegin<T>(IEnumerable<T>, IEnumerable<T>) Declaration public static IEnumerable<T> AppendRangeAtBegin<T>(this IEnumerable<T> this, IEnumerable<T> range) Parameters Type Name Description IEnumerable <T> this IEnumerable <T> range Returns Type Description IEnumerable <T> Type Parameters Name Description T | Improve this Doc View Source AppendRangeAtEnd<T>(IEnumerable<T>, IEnumerable<T>) Declaration public static IEnumerable<T> AppendRangeAtEnd<T>(this IEnumerable<T> this, IEnumerable<T> range) Parameters Type Name Description IEnumerable <T> this IEnumerable <T> range Returns Type Description IEnumerable <T> Type Parameters Name Description T | Improve this Doc View Source ForEach<T>(IEnumerable<T>, Action<T>) Declaration public static IEnumerable<T> ForEach<T>(this IEnumerable<T> this, Action<T> action) Parameters Type Name Description IEnumerable <T> this Action <T> action Returns Type Description IEnumerable <T> Type Parameters Name Description T | Improve this Doc View Source Iterate<T>(IEnumerable<T>, Action<Int32, T>) Declaration public static IEnumerable<T> Iterate<T>(this IEnumerable<T> this, Action<int, T> action) Parameters Type Name Description IEnumerable <T> this Action < Int32 , T> action Returns Type Description IEnumerable <T> Type Parameters Name Description T"
  },
  "api/NiTiS.Collections.Generic.CachedDictionary-2.html": {
    "href": "api/NiTiS.Collections.Generic.CachedDictionary-2.html",
    "title": "Class CachedDictionary<TKey, TValue>",
    "keywords": "Class CachedDictionary<TKey, TValue> Inheritance Object CachedDictionary<TKey, TValue> Implements IReadOnlyDictionary <TKey, TValue> IReadOnlyCollection < KeyValuePair <TKey, TValue>> IEnumerable < KeyValuePair <TKey, TValue>> IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Collections.Generic Assembly : NiTiS.Collections.dll Syntax public class CachedDictionary<TKey, TValue> : IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable Type Parameters Name Description TKey TValue Constructors | Improve this Doc View Source CachedDictionary(Func<TKey, TValue>) Declaration public CachedDictionary(Func<TKey, TValue> keyGetter) Parameters Type Name Description Func <TKey, TValue> keyGetter Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[TKey] Declaration public TValue this[TKey key] { get; } Parameters Type Name Description TKey key Property Value Type Description TValue | Improve this Doc View Source Keys Declaration public IEnumerable<TKey> Keys { get; } Property Value Type Description IEnumerable <TKey> | Improve this Doc View Source Values Declaration public IEnumerable<TValue> Values { get; } Property Value Type Description IEnumerable <TValue> Methods | Improve this Doc View Source ContainsKey(TKey) Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key Returns Type Description Boolean | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns Type Description IEnumerator < KeyValuePair <TKey, TValue>> | Improve this Doc View Source TryGetValue(TKey, out TValue) Declaration public bool TryGetValue(TKey key, out TValue value) Parameters Type Name Description TKey key TValue value Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods Enumerable.AppendRangeAtEnd<T>(IEnumerable<T>, IEnumerable<T>) Enumerable.AppendRangeAtBegin<T>(IEnumerable<T>, IEnumerable<T>) Enumerable.AppendAtBegin<T>(IEnumerable<T>, T) Enumerable.ForEach<T>(IEnumerable<T>, Action<T>) Enumerable.Iterate<T>(IEnumerable<T>, Action<Int32, T>)"
  },
  "api/NiTiS.Collections.Generic.Empty-1.EmptyEnumerator.html": {
    "href": "api/NiTiS.Collections.Generic.Empty-1.EmptyEnumerator.html",
    "title": "Struct Empty<T>.EmptyEnumerator",
    "keywords": "Struct Empty<T>.EmptyEnumerator Implements IEnumerator <T> IEnumerator IDisposable Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : NiTiS.Collections.Generic Assembly : NiTiS.Collections.dll Syntax public readonly struct EmptyEnumerator : IEnumerator<T>, IEnumerator, IDisposable Properties | Improve this Doc View Source Current Declaration public readonly T Current { get; } Property Value Type Description T Methods | Improve this Doc View Source Dispose() Declaration public readonly void Dispose() | Improve this Doc View Source MoveNext() Declaration public readonly bool MoveNext() Returns Type Description Boolean | Improve this Doc View Source Reset() Declaration public readonly void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration readonly object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.Collections.IEnumerator System.IDisposable"
  },
  "api/NiTiS.Collections.Generic.Empty-1.html": {
    "href": "api/NiTiS.Collections.Generic.Empty-1.html",
    "title": "Class Empty<T>",
    "keywords": "Class Empty<T> Empty collection Inheritance Object Empty<T> Implements IList <T> ICollection <T> IEnumerable <T> IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Collections.Generic Assembly : NiTiS.Collections.dll Syntax public sealed class Empty<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description T Methods | Improve this Doc View Source Add(T) Declaration public void Add(T item) Parameters Type Name Description T item | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean | Improve this Doc View Source CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array Int32 arrayIndex | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> | Improve this Doc View Source IndexOf(T) Declaration public int IndexOf(T item) Parameters Type Name Description T item Returns Type Description Int32 | Improve this Doc View Source Insert(Int32, T) Declaration public void Insert(int index, T item) Parameters Type Name Description Int32 index T item | Improve this Doc View Source Remove(T) Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description Boolean | Improve this Doc View Source RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods Enumerable.AppendRangeAtEnd<T>(IEnumerable<T>, IEnumerable<T>) Enumerable.AppendRangeAtBegin<T>(IEnumerable<T>, IEnumerable<T>) Enumerable.AppendAtBegin<T>(IEnumerable<T>, T) Enumerable.ForEach<T>(IEnumerable<T>, Action<T>) Enumerable.Iterate<T>(IEnumerable<T>, Action<Int32, T>)"
  },
  "api/NiTiS.Collections.Generic.html": {
    "href": "api/NiTiS.Collections.Generic.html",
    "title": "Namespace NiTiS.Collections.Generic",
    "keywords": "Namespace NiTiS.Collections.Generic Classes CachedDictionary<TKey, TValue> Empty<T> Empty collection SmartDictonary<TKey, TValue> Structs Empty<T>.EmptyEnumerator Delegates SmartDictonary<TKey, TValue>.KeyGetter"
  },
  "api/NiTiS.Collections.Generic.SmartDictonary-2.html": {
    "href": "api/NiTiS.Collections.Generic.SmartDictonary-2.html",
    "title": "Class SmartDictonary<TKey, TValue>",
    "keywords": "Class SmartDictonary<TKey, TValue> Inheritance Object Dictionary <TKey, TValue> SmartDictonary<TKey, TValue> Implements IDictionary <TKey, TValue> ICollection < KeyValuePair <TKey, TValue>> IReadOnlyDictionary <TKey, TValue> IReadOnlyCollection < KeyValuePair <TKey, TValue>> IEnumerable < KeyValuePair <TKey, TValue>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable Inherited Members System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.set_Item(System.Object, System.Object) Dictionary<TKey, TValue>.Add(TKey, TValue) Dictionary<TKey, TValue>.Clear() Dictionary<TKey, TValue>.ContainsKey(TKey) Dictionary<TKey, TValue>.ContainsValue(TValue) Dictionary<TKey, TValue>.EnsureCapacity(Int32) Dictionary<TKey, TValue>.GetEnumerator() Dictionary<TKey, TValue>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, TValue>.OnDeserialization(Object) Dictionary<TKey, TValue>.Remove(TKey) Dictionary<TKey, TValue>.Remove(TKey, TValue) System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>) System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>) System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], System.Int32) System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>) System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator() Dictionary<TKey, TValue>.ICollection.CopyTo(Array, Int32) Dictionary<TKey, TValue>.IDictionary.Add(Object, Object) Dictionary<TKey, TValue>.IDictionary.Contains(Object) Dictionary<TKey, TValue>.IDictionary.GetEnumerator() Dictionary<TKey, TValue>.IDictionary.Remove(Object) Dictionary<TKey, TValue>.IEnumerable.GetEnumerator() Dictionary<TKey, TValue>.TrimExcess() Dictionary<TKey, TValue>.TrimExcess(Int32) Dictionary<TKey, TValue>.TryAdd(TKey, TValue) Dictionary<TKey, TValue>.TryGetValue(TKey, TValue) Dictionary<TKey, TValue>.Comparer Dictionary<TKey, TValue>.Count Dictionary<TKey, TValue>.Item[TKey] Dictionary<TKey, TValue>.Keys System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.IsReadOnly System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Keys System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Values System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values Dictionary<TKey, TValue>.ICollection.IsSynchronized Dictionary<TKey, TValue>.ICollection.SyncRoot Dictionary<TKey, TValue>.IDictionary.IsFixedSize Dictionary<TKey, TValue>.IDictionary.IsReadOnly Dictionary<TKey, TValue>.IDictionary.Item[Object] Dictionary<TKey, TValue>.IDictionary.Keys Dictionary<TKey, TValue>.IDictionary.Values Dictionary<TKey, TValue>.Values Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Collections.Generic Assembly : NiTiS.Collections.dll Syntax public class SmartDictonary<TKey, TValue> : Dictionary<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable Type Parameters Name Description TKey TValue Constructors | Improve this Doc View Source SmartDictonary(SmartDictonary<TKey, TValue>.KeyGetter) Declaration public SmartDictonary(SmartDictonary<TKey, TValue>.KeyGetter keyGetter) Parameters Type Name Description SmartDictonary.KeyGetter <> keyGetter | Improve this Doc View Source SmartDictonary(SmartDictonary<TKey, TValue>.KeyGetter, IDictionary<TKey, TValue>) Declaration public SmartDictonary(SmartDictonary<TKey, TValue>.KeyGetter keyGetter, IDictionary<TKey, TValue> dictionary) Parameters Type Name Description SmartDictonary.KeyGetter <> keyGetter IDictionary <TKey, TValue> dictionary | Improve this Doc View Source SmartDictonary(SmartDictonary<TKey, TValue>.KeyGetter, IDictionary<TKey, TValue>, IEqualityComparer<TKey>) Declaration public SmartDictonary(SmartDictonary<TKey, TValue>.KeyGetter keyGetter, IDictionary<TKey, TValue> dictionary, IEqualityComparer<TKey> comparer) Parameters Type Name Description SmartDictonary.KeyGetter <> keyGetter IDictionary <TKey, TValue> dictionary IEqualityComparer <TKey> comparer | Improve this Doc View Source SmartDictonary(SmartDictonary<TKey, TValue>.KeyGetter, Int32) Declaration public SmartDictonary(SmartDictonary<TKey, TValue>.KeyGetter keyGetter, int capacity) Parameters Type Name Description SmartDictonary.KeyGetter <> keyGetter Int32 capacity | Improve this Doc View Source SmartDictonary(SmartDictonary<TKey, TValue>.KeyGetter, Int32, IEqualityComparer<TKey>) Declaration public SmartDictonary(SmartDictonary<TKey, TValue>.KeyGetter keyGetter, int capacity, IEqualityComparer<TKey> comparer) Parameters Type Name Description SmartDictonary.KeyGetter <> keyGetter Int32 capacity IEqualityComparer <TKey> comparer Fields | Improve this Doc View Source keyGetter Declaration protected readonly SmartDictonary<TKey, TValue>.KeyGetter keyGetter Field Value Type Description SmartDictonary.KeyGetter <> Methods | Improve this Doc View Source Add(TValue) Declaration public void Add(TValue value) Parameters Type Name Description TValue value | Improve this Doc View Source Remove(TValue) Declaration public void Remove(TValue value) Parameters Type Name Description TValue value | Improve this Doc View Source Remove(TValue, out TKey) Declaration public void Remove(TValue value, out TKey key) Parameters Type Name Description TValue value TKey key Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable System.Runtime.Serialization.IDeserializationCallback System.Runtime.Serialization.ISerializable Extension Methods Enumerable.AppendRangeAtEnd<T>(IEnumerable<T>, IEnumerable<T>) Enumerable.AppendRangeAtBegin<T>(IEnumerable<T>, IEnumerable<T>) Enumerable.AppendAtBegin<T>(IEnumerable<T>, T) Enumerable.ForEach<T>(IEnumerable<T>, Action<T>) Enumerable.Iterate<T>(IEnumerable<T>, Action<Int32, T>)"
  },
  "api/NiTiS.Collections.Generic.SmartDictonary-2.KeyGetter.html": {
    "href": "api/NiTiS.Collections.Generic.SmartDictonary-2.KeyGetter.html",
    "title": "Delegate SmartDictonary<TKey, TValue>.KeyGetter",
    "keywords": "Delegate SmartDictonary<TKey, TValue>.KeyGetter Namespace : NiTiS.Collections.Generic Assembly : NiTiS.Collections.dll Syntax public delegate TKey KeyGetter(TValue key); Parameters Type Name Description TValue key Returns Type Description TKey"
  },
  "api/NiTiS.Collections.Generic.Stepped.ChangeStepBehaviour.html": {
    "href": "api/NiTiS.Collections.Generic.Stepped.ChangeStepBehaviour.html",
    "title": "Enum ChangeStepBehaviour",
    "keywords": "Enum ChangeStepBehaviour Namespace : NiTiS.Collections.Generic.Stepped Assembly : NiTiS.Collections.dll Syntax public enum ChangeStepBehaviour : byte Fields Name Description None RemoveHigher RemoveLower"
  },
  "api/NiTiS.Collections.Generic.Stepped.html": {
    "href": "api/NiTiS.Collections.Generic.Stepped.html",
    "title": "Namespace NiTiS.Collections.Generic.Stepped",
    "keywords": "Namespace NiTiS.Collections.Generic.Stepped Classes SteppedList<T> Represent a generic stepped collection of objects that can be individually accessed SteppedList<T>.Enumerator Structs SteppedElement<T> Interfaces IReadOnlySteppedCollection ISteppedCollection Enums ChangeStepBehaviour"
  },
  "api/NiTiS.Collections.Generic.Stepped.IReadOnlySteppedCollection.html": {
    "href": "api/NiTiS.Collections.Generic.Stepped.IReadOnlySteppedCollection.html",
    "title": "Interface IReadOnlySteppedCollection",
    "keywords": "Interface IReadOnlySteppedCollection Namespace : NiTiS.Collections.Generic.Stepped Assembly : NiTiS.Collections.dll Syntax public interface IReadOnlySteppedCollection Properties | Improve this Doc View Source CurrentStep Specifies the current collection step Declaration int CurrentStep { get; } Property Value Type Description Int32"
  },
  "api/NiTiS.Collections.Generic.Stepped.ISteppedCollection.html": {
    "href": "api/NiTiS.Collections.Generic.Stepped.ISteppedCollection.html",
    "title": "Interface ISteppedCollection",
    "keywords": "Interface ISteppedCollection Namespace : NiTiS.Collections.Generic.Stepped Assembly : NiTiS.Collections.dll Syntax public interface ISteppedCollection Properties | Improve this Doc View Source CurrentStep Specifies the current collection step Declaration int CurrentStep { get; set; } Property Value Type Description Int32"
  },
  "api/NiTiS.Collections.Generic.Stepped.SteppedElement-1.html": {
    "href": "api/NiTiS.Collections.Generic.Stepped.SteppedElement-1.html",
    "title": "Struct SteppedElement<T>",
    "keywords": "Struct SteppedElement<T> Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : NiTiS.Collections.Generic.Stepped Assembly : NiTiS.Collections.dll Syntax public readonly struct SteppedElement<T> Type Parameters Name Description T Constructors | Improve this Doc View Source SteppedElement(T, Int32) Declaration public SteppedElement(T element, int step) Parameters Type Name Description T element Int32 step Fields | Improve this Doc View Source Element Declaration public readonly T Element Field Value Type Description T | Improve this Doc View Source Step Declaration public readonly int Step Field Value Type Description Int32"
  },
  "api/NiTiS.Collections.Generic.Stepped.SteppedList-1.Enumerator.html": {
    "href": "api/NiTiS.Collections.Generic.Stepped.SteppedList-1.Enumerator.html",
    "title": "Class SteppedList<T>.Enumerator",
    "keywords": "Class SteppedList<T>.Enumerator Inheritance Object SteppedList<T>.Enumerator Implements IEnumerator <T> IEnumerator IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Collections.Generic.Stepped Assembly : NiTiS.Collections.dll Syntax protected class Enumerator : IEnumerator<T>, IEnumerator, IDisposable Constructors | Improve this Doc View Source Enumerator(SteppedList<T>) Declaration public Enumerator(SteppedList<T> list) Parameters Type Name Description SteppedList <T> list Fields | Improve this Doc View Source list Declaration protected readonly SteppedList<T> list Field Value Type Description SteppedList <T> Properties | Improve this Doc View Source Current Declaration public T Current { get; } Property Value Type Description T Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.Collections.IEnumerator System.IDisposable"
  },
  "api/NiTiS.Collections.Generic.Stepped.SteppedList-1.html": {
    "href": "api/NiTiS.Collections.Generic.Stepped.SteppedList-1.html",
    "title": "Class SteppedList<T>",
    "keywords": "Class SteppedList<T> Represent a generic stepped collection of objects that can be individually accessed Inheritance Object SteppedList<T> Implements ISteppedCollection IReadOnlySteppedCollection IList <T> ICollection <T> IList ICollection IReadOnlyList <T> IReadOnlyCollection <T> IEnumerable <T> IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Collections.Generic.Stepped Assembly : NiTiS.Collections.dll Syntax public class SteppedList<T> : ISteppedCollection, IReadOnlySteppedCollection, IList<T>, ICollection<T>, IList, ICollection, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of elements in the list Constructors | Improve this Doc View Source SteppedList() Creates a empty SteppedList<T> Declaration public SteppedList() | Improve this Doc View Source SteppedList(ChangeStepBehaviour) Creates a empty SteppedList<T> Declaration public SteppedList(ChangeStepBehaviour behaviour) Parameters Type Name Description ChangeStepBehaviour behaviour Behaviour when step is changed | Improve this Doc View Source SteppedList(IEnumerable<SteppedElement<T>>, ChangeStepBehaviour) Creates a SteppedList<T> cloned from collection Declaration public SteppedList(IEnumerable<SteppedElement<T>> collection, ChangeStepBehaviour behaviour) Parameters Type Name Description IEnumerable < SteppedElement <T>> collection Collection to clone ChangeStepBehaviour behaviour Behaviour when step is changed Exceptions Type Condition ArgumentNullException collection is null | Improve this Doc View Source SteppedList(Int32, ChangeStepBehaviour) Creates a capacity sized SteppedList<T> Declaration public SteppedList(int capacity, ChangeStepBehaviour behaviour) Parameters Type Name Description Int32 capacity Capacity for the new list ChangeStepBehaviour behaviour Behaviour when step is changed Exceptions Type Condition ArgumentOutOfRangeException Invalid size Fields | Improve this Doc View Source Behaviour Declaration public readonly ChangeStepBehaviour Behaviour Field Value Type Description ChangeStepBehaviour | Improve this Doc View Source items Declaration protected SteppedElement<T>[] items Field Value Type Description SteppedElement <T>[] | Improve this Doc View Source size Declaration protected int size Field Value Type Description Int32 | Improve this Doc View Source step Declaration protected int step Field Value Type Description Int32 Properties | Improve this Doc View Source Capacity Gets and sets the capacity of this list The capacity is the size of the internal array used to hold items Declaration public int Capacity { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source CurrentStep Specifies the current collection step Declaration public int CurrentStep { get; set; } Property Value Type Description Int32 | Improve this Doc View Source IsFixedSize Declaration public bool IsFixedSize { get; } Property Value Type Description Boolean | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSynchronized Declaration public bool IsSynchronized { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description T | Improve this Doc View Source SyncRoot Declaration public object SyncRoot { get; } Property Value Type Description Object Methods | Improve this Doc View Source Add(T) Declaration public void Add(T item) Parameters Type Name Description T item | Improve this Doc View Source AddWithResize(SteppedElement<T>) Declaration protected void AddWithResize(SteppedElement<T> item) Parameters Type Name Description SteppedElement <T> item | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean | Improve this Doc View Source CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array Int32 arrayIndex | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> | Improve this Doc View Source Grow(Int32) Increase the capacity of this list to at least the specified capacity Declaration protected void Grow(int capacity) Parameters Type Name Description Int32 capacity The minimum capacity to ensure | Improve this Doc View Source IndexOf(T) Declaration public int IndexOf(T item) Parameters Type Name Description T item Returns Type Description Int32 | Improve this Doc View Source IndexOf(Object) Declaration public int IndexOf(object value) Parameters Type Name Description Object value Returns Type Description Int32 | Improve this Doc View Source Insert(Int32, T) Declaration public void Insert(int index, T item) Parameters Type Name Description Int32 index T item | Improve this Doc View Source InternalAdd(SteppedElement<T>) Declaration protected int InternalAdd(SteppedElement<T> item) Parameters Type Name Description SteppedElement <T> item Returns Type Description Int32 | Improve this Doc View Source Remove(T) Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description Boolean | Improve this Doc View Source RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index Explicit Interface Implementations | Improve this Doc View Source ICollection.CopyTo(Array, Int32) Declaration void ICollection.CopyTo(Array array, int index) Parameters Type Name Description Array array Int32 index | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator | Improve this Doc View Source IList.Add(Object) Declaration int IList.Add(object value) Parameters Type Name Description Object value Returns Type Description Int32 | Improve this Doc View Source IList.Contains(Object) Declaration bool IList.Contains(object value) Parameters Type Name Description Object value Returns Type Description Boolean | Improve this Doc View Source IList.Insert(Int32, Object) Declaration void IList.Insert(int index, object value) Parameters Type Name Description Int32 index Object value | Improve this Doc View Source IList.Item[Int32] Declaration object IList.this[int index] { get; set; } Parameters Type Name Description Int32 index Returns Type Description Object | Improve this Doc View Source IList.Remove(Object) Declaration void IList.Remove(object value) Parameters Type Name Description Object value Implements ISteppedCollection IReadOnlySteppedCollection System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods Enumerable.AppendRangeAtEnd<T>(IEnumerable<T>, IEnumerable<T>) Enumerable.AppendRangeAtBegin<T>(IEnumerable<T>, IEnumerable<T>) Enumerable.AppendAtBegin<T>(IEnumerable<T>, T) Enumerable.ForEach<T>(IEnumerable<T>, Action<T>) Enumerable.Iterate<T>(IEnumerable<T>, Action<Int32, T>)"
  },
  "api/NiTiS.Collections.html": {
    "href": "api/NiTiS.Collections.html",
    "title": "Namespace NiTiS.Collections",
    "keywords": "Namespace NiTiS.Collections Classes Enumerable"
  },
  "api/NiTiS.Core.Annotations.CallsOnlyByMainThreadAttribute.html": {
    "href": "api/NiTiS.Core.Annotations.CallsOnlyByMainThreadAttribute.html",
    "title": "Class CallsOnlyByMainThreadAttribute",
    "keywords": "Class CallsOnlyByMainThreadAttribute Inheritance Object Attribute CallsOnlyByMainThreadAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Core.Annotations Assembly : NiTiS.Core.dll Syntax [AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Event)] public sealed class CallsOnlyByMainThreadAttribute : Attribute"
  },
  "api/NiTiS.Core.Annotations.html": {
    "href": "api/NiTiS.Core.Annotations.html",
    "title": "Namespace NiTiS.Core.Annotations",
    "keywords": "Namespace NiTiS.Core.Annotations Classes CallsOnlyByMainThreadAttribute NotImplementYetAttribute ObsoleteImplAttribute RenameRequestAttribute"
  },
  "api/NiTiS.Core.Annotations.NotImplementYetAttribute.html": {
    "href": "api/NiTiS.Core.Annotations.NotImplementYetAttribute.html",
    "title": "Class NotImplementYetAttribute",
    "keywords": "Class NotImplementYetAttribute Inheritance Object Attribute NotImplementYetAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Core.Annotations Assembly : NiTiS.Core.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Event | AttributeTargets.Interface)] public sealed class NotImplementYetAttribute : Attribute"
  },
  "api/NiTiS.Core.Annotations.ObsoleteImplAttribute.html": {
    "href": "api/NiTiS.Core.Annotations.ObsoleteImplAttribute.html",
    "title": "Class ObsoleteImplAttribute",
    "keywords": "Class ObsoleteImplAttribute Inheritance Object Attribute ObsoleteImplAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Core.Annotations Assembly : NiTiS.Core.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Event | AttributeTargets.Interface)] public class ObsoleteImplAttribute : Attribute"
  },
  "api/NiTiS.Core.Annotations.RenameRequestAttribute.html": {
    "href": "api/NiTiS.Core.Annotations.RenameRequestAttribute.html",
    "title": "Class RenameRequestAttribute",
    "keywords": "Class RenameRequestAttribute Inheritance Object Attribute RenameRequestAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Core.Annotations Assembly : NiTiS.Core.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Parameter | AttributeTargets.Delegate)] public sealed class RenameRequestAttribute : Attribute"
  },
  "api/NiTiS.Core.html": {
    "href": "api/NiTiS.Core.html",
    "title": "Namespace NiTiS.Core",
    "keywords": "Namespace NiTiS.Core Classes ReadOnlyRef<T> Ref<T> Strings Provides extensions for strings Types Structs Struct16 Collection of bits, keeps the same bit positions for all primitive types Struct32 Collection of bits, keeps the same bit positions for all primitive types Struct64 Collection of bits, keeps the same bit positions for all primitive types Struct8 Collection of bits, keeps the same bit positions for all primitive types"
  },
  "api/NiTiS.Core.ReadOnlyRef-1.html": {
    "href": "api/NiTiS.Core.ReadOnlyRef-1.html",
    "title": "Class ReadOnlyRef<T>",
    "keywords": "Class ReadOnlyRef<T> Inheritance Object ReadOnlyRef<T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Core Assembly : NiTiS.Core.dll Syntax public class ReadOnlyRef<T> where T : struct Type Parameters Name Description T Constructors | Improve this Doc View Source ReadOnlyRef() Declaration public ReadOnlyRef() | Improve this Doc View Source ReadOnlyRef(T) Declaration public ReadOnlyRef(T value) Parameters Type Name Description T value Fields | Improve this Doc View Source Value Declaration public readonly T Value Field Value Type Description T"
  },
  "api/NiTiS.Core.Ref-1.html": {
    "href": "api/NiTiS.Core.Ref-1.html",
    "title": "Class Ref<T>",
    "keywords": "Class Ref<T> Inheritance Object Ref<T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Core Assembly : NiTiS.Core.dll Syntax public class Ref<T> where T : struct Type Parameters Name Description T Constructors | Improve this Doc View Source Ref() Declaration public Ref() | Improve this Doc View Source Ref(T) Declaration public Ref(T value) Parameters Type Name Description T value Properties | Improve this Doc View Source Value Declaration public T Value { get; set; } Property Value Type Description T"
  },
  "api/NiTiS.Core.Strings.html": {
    "href": "api/NiTiS.Core.Strings.html",
    "title": "Class Strings",
    "keywords": "Class Strings Provides extensions for strings Inheritance Object Strings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Core Assembly : NiTiS.Core.dll Syntax public static class Strings Methods | Improve this Doc View Source FromArray(IEnumerable, Func<Object, String>, String, String, String, String) Declaration public static string FromArray(IEnumerable array, Func<object, string> dToString = null, string start = \"[\", string end = \"]\", string seperator = \", \", string nullName = \"null\") Parameters Type Name Description IEnumerable array Func < Object , String > dToString String start String end String seperator String nullName Returns Type Description String | Improve this Doc View Source FromArray<T>(T[], Func<T, String>, String, String, String, String) Creates string using some array Declaration public static string FromArray<T>(T[] array, Func<T, string> dToString = null, string start = \"[\", string end = \"]\", string seperator = \", \", string nullName = \"null\") Parameters Type Name Description T[] array Func <T, String > dToString String start String end String seperator String nullName Returns Type Description String For array {0, 1, 2 ,3} returns \"[0, 1, 2, 3]\" Type Parameters Name Description T | Improve this Doc View Source FromArray<T>(IEnumerable<T>, Func<T, String>, String, String, String, String) Declaration public static string FromArray<T>(IEnumerable<T> array, Func<T, string> dToString = null, string start = \"[\", string end = \"]\", string seperator = \", \", string nullName = \"null\") Parameters Type Name Description IEnumerable <T> array Func <T, String > dToString String start String end String seperator String nullName Returns Type Description String Type Parameters Name Description T | Improve this Doc View Source Multiply(String, Int32) Repeat string X times Declaration public static string Multiply(this string value, int repeat) Parameters Type Name Description String value String to repeat Int32 repeat Amount to repeat Returns Type Description String"
  },
  "api/NiTiS.Core.Struct16.html": {
    "href": "api/NiTiS.Core.Struct16.html",
    "title": "Struct Struct16",
    "keywords": "Struct Struct16 Collection of bits, keeps the same bit positions for all primitive types Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : NiTiS.Core Assembly : NiTiS.Core.dll Syntax public struct Struct16 Fields | Improve this Doc View Source Boolean Declaration public bool Boolean Field Value Type Description Boolean | Improve this Doc View Source Bytes Declaration public byte *Bytes Field Value Type Description Byte * | Improve this Doc View Source Char Declaration public char Char Field Value Type Description Char | Improve this Doc View Source Float16 Declaration public Half Float16 Field Value Type Description Half | Improve this Doc View Source Int16 Declaration public short Int16 Field Value Type Description Int16 | Improve this Doc View Source Int8 Declaration public sbyte Int8 Field Value Type Description SByte | Improve this Doc View Source LeftBoolean Declaration public bool LeftBoolean Field Value Type Description Boolean | Improve this Doc View Source LeftChar Declaration public char LeftChar Field Value Type Description Char | Improve this Doc View Source LeftInt8 Declaration public sbyte LeftInt8 Field Value Type Description SByte | Improve this Doc View Source LeftUInt8 Declaration public byte LeftUInt8 Field Value Type Description Byte | Improve this Doc View Source UInt16 Declaration public ushort UInt16 Field Value Type Description UInt16 | Improve this Doc View Source UInt8 Declaration public byte UInt8 Field Value Type Description Byte"
  },
  "api/NiTiS.Core.Struct32.html": {
    "href": "api/NiTiS.Core.Struct32.html",
    "title": "Struct Struct32",
    "keywords": "Struct Struct32 Collection of bits, keeps the same bit positions for all primitive types Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : NiTiS.Core Assembly : NiTiS.Core.dll Syntax public struct Struct32 Fields | Improve this Doc View Source Boolean Declaration public bool Boolean Field Value Type Description Boolean | Improve this Doc View Source Bytes Declaration public byte *Bytes Field Value Type Description Byte * | Improve this Doc View Source Char Declaration public char Char Field Value Type Description Char | Improve this Doc View Source Float16 Declaration public Half Float16 Field Value Type Description Half | Improve this Doc View Source Float32 Declaration public float Float32 Field Value Type Description Single | Improve this Doc View Source Int16 Declaration public short Int16 Field Value Type Description Int16 | Improve this Doc View Source Int32 Declaration public int Int32 Field Value Type Description Int32 | Improve this Doc View Source Int8 Declaration public sbyte Int8 Field Value Type Description SByte | Improve this Doc View Source IntPtr Declaration public nint IntPtr Field Value Type Description IntPtr | Improve this Doc View Source LeftBoolean Declaration public bool LeftBoolean Field Value Type Description Boolean | Improve this Doc View Source LeftChar Declaration public char LeftChar Field Value Type Description Char | Improve this Doc View Source LeftFloat16 Declaration public Half LeftFloat16 Field Value Type Description Half | Improve this Doc View Source LeftInt16 Declaration public short LeftInt16 Field Value Type Description Int16 | Improve this Doc View Source LeftInt8 Declaration public sbyte LeftInt8 Field Value Type Description SByte | Improve this Doc View Source LeftUInt16 Declaration public ushort LeftUInt16 Field Value Type Description UInt16 | Improve this Doc View Source LeftUInt8 Declaration public byte LeftUInt8 Field Value Type Description Byte | Improve this Doc View Source UInt16 Declaration public ushort UInt16 Field Value Type Description UInt16 | Improve this Doc View Source UInt32 Declaration public uint UInt32 Field Value Type Description UInt32 | Improve this Doc View Source UInt8 Declaration public byte UInt8 Field Value Type Description Byte | Improve this Doc View Source UIntPtr Declaration public nuint UIntPtr Field Value Type Description UIntPtr"
  },
  "api/NiTiS.Core.Struct64.html": {
    "href": "api/NiTiS.Core.Struct64.html",
    "title": "Struct Struct64",
    "keywords": "Struct Struct64 Collection of bits, keeps the same bit positions for all primitive types Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : NiTiS.Core Assembly : NiTiS.Core.dll Syntax public struct Struct64 Fields | Improve this Doc View Source Boolean Declaration public bool Boolean Field Value Type Description Boolean | Improve this Doc View Source Bytes Declaration public byte *Bytes Field Value Type Description Byte * | Improve this Doc View Source Char Declaration public char Char Field Value Type Description Char | Improve this Doc View Source Float16 Declaration public Half Float16 Field Value Type Description Half | Improve this Doc View Source Float32 Declaration public float Float32 Field Value Type Description Single | Improve this Doc View Source Float64 Declaration public double Float64 Field Value Type Description Double | Improve this Doc View Source Int16 Declaration public short Int16 Field Value Type Description Int16 | Improve this Doc View Source Int32 Declaration public int Int32 Field Value Type Description Int32 | Improve this Doc View Source Int64 Declaration public int Int64 Field Value Type Description Int32 | Improve this Doc View Source Int8 Declaration public sbyte Int8 Field Value Type Description SByte | Improve this Doc View Source IntPtr Declaration public nint IntPtr Field Value Type Description IntPtr | Improve this Doc View Source LeftBoolean Declaration public bool LeftBoolean Field Value Type Description Boolean | Improve this Doc View Source LeftChar Declaration public char LeftChar Field Value Type Description Char | Improve this Doc View Source LeftFloat16 Declaration public Half LeftFloat16 Field Value Type Description Half | Improve this Doc View Source LeftFloat32 Declaration public float LeftFloat32 Field Value Type Description Single | Improve this Doc View Source LeftInt16 Declaration public short LeftInt16 Field Value Type Description Int16 | Improve this Doc View Source LeftInt32 Declaration public int LeftInt32 Field Value Type Description Int32 | Improve this Doc View Source LeftInt8 Declaration public sbyte LeftInt8 Field Value Type Description SByte | Improve this Doc View Source LeftUInt16 Declaration public ushort LeftUInt16 Field Value Type Description UInt16 | Improve this Doc View Source LeftUInt32 Declaration public uint LeftUInt32 Field Value Type Description UInt32 | Improve this Doc View Source LeftUInt8 Declaration public byte LeftUInt8 Field Value Type Description Byte | Improve this Doc View Source RightIntPtr Declaration public nint RightIntPtr Field Value Type Description IntPtr | Improve this Doc View Source RightUIntPtr Declaration public nuint RightUIntPtr Field Value Type Description UIntPtr | Improve this Doc View Source UInt16 Declaration public ushort UInt16 Field Value Type Description UInt16 | Improve this Doc View Source UInt32 Declaration public uint UInt32 Field Value Type Description UInt32 | Improve this Doc View Source UInt64 Declaration public uint UInt64 Field Value Type Description UInt32 | Improve this Doc View Source UInt8 Declaration public byte UInt8 Field Value Type Description Byte | Improve this Doc View Source UIntPtr Declaration public nuint UIntPtr Field Value Type Description UIntPtr"
  },
  "api/NiTiS.Core.Struct8.html": {
    "href": "api/NiTiS.Core.Struct8.html",
    "title": "Struct Struct8",
    "keywords": "Struct Struct8 Collection of bits, keeps the same bit positions for all primitive types Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : NiTiS.Core Assembly : NiTiS.Core.dll Syntax public struct Struct8 Fields | Improve this Doc View Source Boolean Declaration public bool Boolean Field Value Type Description Boolean | Improve this Doc View Source Bytes Declaration public byte *Bytes Field Value Type Description Byte * | Improve this Doc View Source Char Declaration public char Char Field Value Type Description Char | Improve this Doc View Source Int8 Declaration public sbyte Int8 Field Value Type Description SByte | Improve this Doc View Source UInt8 Declaration public byte UInt8 Field Value Type Description Byte"
  },
  "api/NiTiS.Core.Types.html": {
    "href": "api/NiTiS.Core.Types.html",
    "title": "Class Types",
    "keywords": "Class Types Inheritance Object Types Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Core Assembly : NiTiS.Core.dll Syntax public static class Types Methods | Improve this Doc View Source NormalizedFullName(Type, Boolean) Declaration public static string NormalizedFullName(this Type type, bool deepFullName = true) Parameters Type Name Description Type type Boolean deepFullName Returns Type Description String | Improve this Doc View Source NormalizedName(Type, Boolean) Declaration public static string NormalizedName(this Type type, bool deepFullName = false) Parameters Type Name Description Type type Boolean deepFullName Returns Type Description String"
  },
  "api/NiTiS.Math.Geometry.Box.html": {
    "href": "api/NiTiS.Math.Geometry.Box.html",
    "title": "Class Box",
    "keywords": "Class Box Inheritance Object Box Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Math.Geometry Assembly : NiTiS.Math.dll Syntax public static class Box Methods | Improve this Doc View Source CreateInflated<T>(Box<T>, Vector3d<T>) Declaration public static Box<T> CreateInflated<T>(Box<T> square, Vector3d<T> point) where T : struct, INumber<T> Parameters Type Name Description Box <T> square Vector3d <T> point Returns Type Description Box <T> Type Parameters Name Description T | Improve this Doc View Source GetDistanceToNearestEdge<T>(Box<T>, Vector3d<T>) Declaration public static T GetDistanceToNearestEdge<T>(Box<T> box, Vector3d<T> point) where T : struct, INumber<T>, IRootFunctions<T> Parameters Type Name Description Box <T> box Vector3d <T> point Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetSquaredDistanceToNearestEdge<T>(Box<T>, Vector3d<T>) Declaration public static T GetSquaredDistanceToNearestEdge<T>(Box<T> box, Vector3d<T> point) where T : struct, INumber<T>, IRootFunctions<T> Parameters Type Name Description Box <T> box Vector3d <T> point Returns Type Description T Type Parameters Name Description T"
  },
  "api/NiTiS.Math.Geometry.Box-1.html": {
    "href": "api/NiTiS.Math.Geometry.Box-1.html",
    "title": "Struct Box<T>",
    "keywords": "Struct Box<T> Implements IEquatable < Box <T>> IEqualityOperators < Box <T>, Box <T>, Boolean > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : NiTiS.Math.Geometry Assembly : NiTiS.Math.dll Syntax public readonly struct Box<T> : IEquatable<Box<T>>, IEqualityOperators<Box<T>, Box<T>, bool> where T : struct, INumberBase<T>, IComparisonOperators<T, T, bool> Type Parameters Name Description T Constructors | Improve this Doc View Source Box(T, T, T, T, T, T) Declaration public Box(T minX, T minY, T minZ, T maxX, T maxY, T maxZ) Parameters Type Name Description T minX T minY T minZ T maxX T maxY T maxZ | Improve this Doc View Source Box(T, T, T, Vector3d<T>) Declaration public Box(T minX, T minY, T minZ, Vector3d<T> max) Parameters Type Name Description T minX T minY T minZ Vector3d <T> max | Improve this Doc View Source Box(Vector3d<T>, T, T, T) Declaration public Box(Vector3d<T> min, T maxX, T maxY, T maxZ) Parameters Type Name Description Vector3d <T> min T maxX T maxY T maxZ | Improve this Doc View Source Box(Vector3d<T>, Vector3d<T>) Declaration public Box(Vector3d<T> min, Vector3d<T> max) Parameters Type Name Description Vector3d <T> min Vector3d <T> max Fields | Improve this Doc View Source Max Declaration public readonly Vector3d<T> Max Field Value Type Description Vector3d <T> | Improve this Doc View Source Min Declaration public readonly Vector3d<T> Min Field Value Type Description Vector3d <T> Properties | Improve this Doc View Source Center Declaration public readonly Vector3d<T> Center { get; } Property Value Type Description Vector3d <T> | Improve this Doc View Source Size Declaration public readonly Vector3d<T> Size { get; } Property Value Type Description Vector3d <T> Methods | Improve this Doc View Source Contains(Box<T>) Declaration public readonly bool Contains(Box<T> point) Parameters Type Name Description Box <T> point Returns Type Description Boolean | Improve this Doc View Source Contains(Vector3d<T>) Declaration public readonly bool Contains(Vector3d<T> point) Parameters Type Name Description Vector3d <T> point Returns Type Description Boolean | Improve this Doc View Source Equals(Box<T>) Declaration public readonly bool Equals(Box<T> other) Parameters Type Name Description Box <T> other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source GetScaled(Vector3d<T>, Vector3d<T>) Declaration public readonly Box<T> GetScaled(Vector3d<T> scale, Vector3d<T> anchor) Parameters Type Name Description Vector3d <T> scale Vector3d <T> anchor Returns Type Description Box <T> | Improve this Doc View Source GetTranslated(Vector3d<T>) Declaration public readonly Box<T> GetTranslated(Vector3d<T> distance) Parameters Type Name Description Vector3d <T> distance Returns Type Description Box <T> Operators | Improve this Doc View Source Equality(Box<T>, Box<T>) Declaration public static bool operator ==(Box<T> left, Box<T> right) Parameters Type Name Description Box <T> left Box <T> right Returns Type Description Boolean | Improve this Doc View Source Inequality(Box<T>, Box<T>) Declaration public static bool operator !=(Box<T> left, Box<T> right) Parameters Type Name Description Box <T> left Box <T> right Returns Type Description Boolean Implements System.IEquatable<T> System.Numerics.IEqualityOperators<TSelf,TOther,TResult>"
  },
  "api/NiTiS.Math.Geometry.html": {
    "href": "api/NiTiS.Math.Geometry.html",
    "title": "Namespace NiTiS.Math.Geometry",
    "keywords": "Namespace NiTiS.Math.Geometry Classes Box Plane Quaternion Region2d Square Structs Box<T> Plane<T> Quaternion<T> Represents a vector that is used to encode three-dimensional physical rotations. Region2d<T> Two-dimension region with origin point and size. Region3d<T> Third-dimension region with origin point and size. Square<T>"
  },
  "api/NiTiS.Math.Geometry.Plane.html": {
    "href": "api/NiTiS.Math.Geometry.Plane.html",
    "title": "Class Plane",
    "keywords": "Class Plane Inheritance Object Plane Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Math.Geometry Assembly : NiTiS.Math.dll Syntax public static class Plane Methods | Improve this Doc View Source Normalize<T>(Plane<T>) Declaration [Obsolete(\"\")] public static Plane<T> Normalize<T>(Plane<T> plane) where T : struct, INumberBase<T> Parameters Type Name Description Plane <T> plane Returns Type Description Plane <T> Type Parameters Name Description T"
  },
  "api/NiTiS.Math.Geometry.Plane-1.html": {
    "href": "api/NiTiS.Math.Geometry.Plane-1.html",
    "title": "Struct Plane<T>",
    "keywords": "Struct Plane<T> Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : NiTiS.Math.Geometry Assembly : NiTiS.Math.dll Syntax [Obsolete(\"\")] public struct Plane<T> where T : struct, INumberBase<T> Type Parameters Name Description T Fields | Improve this Doc View Source D Declaration public T D Field Value Type Description T | Improve this Doc View Source Normal Declaration public Vector3d<T> Normal Field Value Type Description Vector3d <T>"
  },
  "api/NiTiS.Math.Geometry.Quaternion.html": {
    "href": "api/NiTiS.Math.Geometry.Quaternion.html",
    "title": "Class Quaternion",
    "keywords": "Class Quaternion Inheritance Object Quaternion Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Math.Geometry Assembly : NiTiS.Math.dll Syntax public static class Quaternion Methods | Improve this Doc View Source CreateFromRotationMatrix<T>(Matrix4x4<T>) Creates a quaternion from the specified rotation matrix. Declaration public static Quaternion<T> CreateFromRotationMatrix<T>(Matrix4x4<T> matrix) where T : struct, INumberBase<T>, IComparisonOperators<T, T, bool>, IRootFunctions<T> Parameters Type Name Description Matrix4x4 <T> matrix The rotation matrix. Returns Type Description Quaternion <T> The newly created quaternion. Type Parameters Name Description T | Improve this Doc View Source CreateFromYawPitchRoll<T>(T, T, T) Creates a new quaternion from the given yaw, pitch, and roll. Declaration public static Quaternion<T> CreateFromYawPitchRoll<T>(T yaw, T pitch, T roll) where T : struct, INumberBase<T>, ITrigonometricFunctions<T> Parameters Type Name Description T yaw The yaw angle, in radians, around the Y axis. T pitch The pitch angle, in radians, around the X axis. T roll The roll angle, in radians, around the Z axis. Returns Type Description Quaternion <T> The resulting quaternion. Type Parameters Name Description T"
  },
  "api/NiTiS.Math.Geometry.Quaternion-1.html": {
    "href": "api/NiTiS.Math.Geometry.Quaternion-1.html",
    "title": "Struct Quaternion<T>",
    "keywords": "Struct Quaternion<T> Represents a vector that is used to encode three-dimensional physical rotations. Implements IEqualityOperators < Quaternion <T>, Quaternion <T>, Boolean > IEquatable < Quaternion <T>> Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : NiTiS.Math.Geometry Assembly : NiTiS.Math.dll Syntax [Obsolete(\"\")] public struct Quaternion<T> : IEqualityOperators<Quaternion<T>, Quaternion<T>, bool>, IEquatable<Quaternion<T>> where T : struct, INumberBase<T> Type Parameters Name Description T Quaternion data type. Remarks The Quaternion<T> structure is used to efficiently rotate an object about the (x,y,z) vector by the angle theta, where: w = cos(theta/2) Constructors | Improve this Doc View Source Quaternion(T, T, T, T) Constructs a quaternion from the specified components. Declaration public Quaternion(T x, T y, T z, T w) Parameters Type Name Description T x The value to assign to the X component of the quaternion. T y The value to assign to the Y component of the quaternion. T z The value to assign to the Z component of the quaternion. T w The value to assign to the W component of the quaternion. | Improve this Doc View Source Quaternion(Vector3d<T>, T) Creates a quaternion from the specified vector and rotation parts. Declaration public Quaternion(Vector3d<T> vectorPart, T scalarPart) Parameters Type Name Description Vector3d <T> vectorPart The vector part of the quaternion. T scalarPart The rotation part of the quaternion. | Improve this Doc View Source Quaternion(Vector4d<T>) Constructs a quaternion from the 4d vector. Declaration public Quaternion(Vector4d<T> xyzw) Parameters Type Name Description Vector4d <T> xyzw The vector to assign values of the quaternion. | Improve this Doc View Source Quaternion(ReadOnlySpan<T>) Creates a quaternion from data values. Declaration public Quaternion(ReadOnlySpan<T> data) Parameters Type Name Description ReadOnlySpan <T> data Buffer with elements data. Exceptions Type Condition ArgumentOutOfRangeException The size of data buffer is less than 4 elements. | Improve this Doc View Source Quaternion(ReadOnlySpan<Byte>) Creates a quaternion from data values. Declaration public Quaternion(ReadOnlySpan<byte> data) Parameters Type Name Description ReadOnlySpan < Byte > data Buffer with elements data. Exceptions Type Condition ArgumentOutOfRangeException The size of data buffer is less than 4 elements. Fields | Improve this Doc View Source W The rotation component of the quaternion Declaration public T W Field Value Type Description T | Improve this Doc View Source X The X value of the vector component of the quaternion Declaration public T X Field Value Type Description T | Improve this Doc View Source Y The Y value of the vector component of the quaternion Declaration public T Y Field Value Type Description T | Improve this Doc View Source Z The Z value of the vector component of the quaternion Declaration public T Z Field Value Type Description T Properties | Improve this Doc View Source Identity Gets a quaternion that represents no rotation. Declaration public static readonly Quaternion<T> Identity { get; } Property Value Type Description Quaternion <T> A quaternion whose values are (0, 0, 0, 1) . | Improve this Doc View Source IsIdentity Gets a value that indicates whether the current instance is the identity quaternion. Declaration public readonly bool IsIdentity { get; } Property Value Type Description Boolean true if the current instance is the identity quaternion; otherwise, false . | Improve this Doc View Source Zero Gets a quaternion that represents a zero. Declaration public static readonly Quaternion<T> Zero { get; } Property Value Type Description Quaternion <T> A quaternion whose values are (0, 0, 0, 0) . Methods | Improve this Doc View Source Equals(Quaternion<T>) Declaration public readonly bool Equals(Quaternion<T> other) Parameters Type Name Description Quaternion <T> other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators | Improve this Doc View Source Addition(Quaternion<T>, Quaternion<T>) Adds each element in one quaternion with its corresponding element in a second quaternion. Declaration public static Quaternion<T> operator +(Quaternion<T> left, Quaternion<T> right) Parameters Type Name Description Quaternion <T> left The left quaternion. Quaternion <T> right The right quaternion. Returns Type Description Quaternion <T> The quaternion that contains the summed values of left and right . Remarks The Addition(Quaternion<T>, Quaternion<T>) method defines the operation of the addition operator for Quaternion<T> objects. | Improve this Doc View Source Division(Quaternion<T>, Quaternion<T>) Divides one quaternion by a second quaternion. Declaration public static Quaternion<T> operator /(Quaternion<T> left, Quaternion<T> right) Parameters Type Name Description Quaternion <T> left The dividend. Quaternion <T> right The divisor. Returns Type Description Quaternion <T> The quaternion that results from dividing left by right . Remarks The Division(Quaternion, Quaternion) method defines the division operation for Quaternion objects. | Improve this Doc View Source Equality(Quaternion<T>, Quaternion<T>) Returns a value that indicates whether two quaternions are equal. Declaration public static bool operator ==(Quaternion<T> left, Quaternion<T> right) Parameters Type Name Description Quaternion <T> left The left quaternion to compare. Quaternion <T> right The right quaternion to compare. Returns Type Description Boolean true if the two quaternions are equal; otherwise, false . Remarks Two quaternions are equal if each of their corresponding components is equal. The Equality(Quaternion<T>, Quaternion<T>) method defines the operation of the equality operator for Quaternion<T> objects. | Improve this Doc View Source Inequality(Quaternion<T>, Quaternion<T>) Returns a value that indicates whether two quaternions are not equal. Declaration public static bool operator !=(Quaternion<T> left, Quaternion<T> right) Parameters Type Name Description Quaternion <T> left The left quaternion to compare. Quaternion <T> right The right quaternion to compare. Returns Type Description Boolean true if left and right are not equal; otherwise, false . | Improve this Doc View Source Multiply(Quaternion<T>, T) Returns the quaternion that results from scaling all the components of a specified quaternion by a scalar factor. Declaration public static Quaternion<T> operator *(Quaternion<T> left, T right) Parameters Type Name Description Quaternion <T> left The source quaternion. T right The scalar value. Returns Type Description Quaternion <T> The scaled quaternion. Remarks The Multiply(Quaternion<T>, Quaternion<T>) method defines the operation of the multiplication operator for Quaternion<T> objects. | Improve this Doc View Source Multiply(Quaternion<T>, Quaternion<T>) Returns the quaternion that results from multiplying two quaternions together. Declaration public static Quaternion<T> operator *(Quaternion<T> left, Quaternion<T> right) Parameters Type Name Description Quaternion <T> left The left quaternion. Quaternion <T> right The right quaternion. Returns Type Description Quaternion <T> The product quaternion. Remarks The Multiply(Quaternion<T>, Quaternion<T>) method defines the operation of the multiplication operator for Quaternion objects. | Improve this Doc View Source Subtraction(Quaternion<T>, Quaternion<T>) Subtracts each element in a second quaternion from its corresponding element in a left quaternion. Declaration public static Quaternion<T> operator -(Quaternion<T> left, Quaternion<T> right) Parameters Type Name Description Quaternion <T> left The left quaternion. Quaternion <T> right The second quaternion. Returns Type Description Quaternion <T> The quaternion containing the values that result from subtracting each element in right from its corresponding element in left . Remarks The Subtraction(Quaternion<T>, Quaternion<T>) method defines the operation of the subtraction operator for Quaternion<T> objects. | Improve this Doc View Source UnaryNegation(Quaternion<T>) Reverses the sign of each component of the quaternion. Declaration public static Quaternion<T> operator -(Quaternion<T> operand) Parameters Type Name Description Quaternion <T> operand The quaternion to negate. Returns Type Description Quaternion <T> The negated quaternion. Remarks The UnaryNegation(Quaternion<T>) method defines the operation of the unary negation operator for Quaternion<T> objects. Implements System.Numerics.IEqualityOperators<TSelf,TOther,TResult> System.IEquatable<T>"
  },
  "api/NiTiS.Math.Geometry.Region2d.html": {
    "href": "api/NiTiS.Math.Geometry.Region2d.html",
    "title": "Class Region2d",
    "keywords": "Class Region2d Inheritance Object Region2d Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Math.Geometry Assembly : NiTiS.Math.dll Syntax public static class Region2d Methods | Improve this Doc View Source Collision<T>(Region2d<T>, Region2d<T>) Defines does regions left and right has a collision. Declaration public static bool Collision<T>(Region2d<T> left, Region2d<T> right) where T : struct, INumberBase<T>, IComparisonOperators<T, T, bool> Parameters Type Name Description Region2d <T> left Left operand. Region2d <T> right Right operand. Returns Type Description Boolean true when has a collision, otherwise false . Type Parameters Name Description T | Improve this Doc View Source Perimeter<T>(Region2d<T>) Calculate perimeter of region . Declaration public static T Perimeter<T>(Region2d<T> region) where T : struct, INumberBase<T> Parameters Type Name Description Region2d <T> region Perimeter operand. Returns Type Description T Perimeter of region . Type Parameters Name Description T | Improve this Doc View Source Square<T>(Region2d<T>) Calculate square of region . Declaration public static T Square<T>(Region2d<T> region) where T : struct, INumberBase<T> Parameters Type Name Description Region2d <T> region Square operand. Returns Type Description T Square of region . Type Parameters Name Description T"
  },
  "api/NiTiS.Math.Geometry.Region2d-1.html": {
    "href": "api/NiTiS.Math.Geometry.Region2d-1.html",
    "title": "Struct Region2d<T>",
    "keywords": "Struct Region2d<T> Two-dimension region with origin point and size. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : NiTiS.Math.Geometry Assembly : NiTiS.Math.dll Syntax public struct Region2d<T> where T : struct, INumberBase<T> Type Parameters Name Description T Region type. Constructors | Improve this Doc View Source Region2d(T, T, T, T) Creates new region with origin point( originX , originY ) and size( sizeX , sizeY ). Declaration public Region2d(T originX, T originY, T sizeX, T sizeY) Parameters Type Name Description T originX Region origin point X. T originY Region origin point Y. T sizeX Region size X. T sizeY Region size Y. | Improve this Doc View Source Region2d(T, T, Vector2d<T>) Creates new region with origin point( originX , originY ) and size . Declaration public Region2d(T originX, T originY, Vector2d<T> size) Parameters Type Name Description T originX Region origin point X. T originY Region origin point Y. Vector2d <T> size Region size. | Improve this Doc View Source Region2d(Vector2d<T>, T, T) Creates new region with origin point and size( sizeX , sizeY ). Declaration public Region2d(Vector2d<T> origin, T sizeX, T sizeY) Parameters Type Name Description Vector2d <T> origin Region origin point. T sizeX Region size X. T sizeY Region size Y. | Improve this Doc View Source Region2d(Vector2d<T>, Vector2d<T>) Creates new region with origin point and size . Declaration public Region2d(Vector2d<T> origin, Vector2d<T> size) Parameters Type Name Description Vector2d <T> origin Region origin point. Vector2d <T> size Region size. | Improve this Doc View Source Region2d(ReadOnlySpan<T>) Creates region by buffer. Declaration public Region2d(ReadOnlySpan<T> data) Parameters Type Name Description ReadOnlySpan <T> data Buffer with region data. Exceptions Type Condition ArgumentOutOfRangeException Length of data buffer not enough for creation. | Improve this Doc View Source Region2d(ReadOnlySpan<Byte>) Creates region by buffer. Declaration public Region2d(ReadOnlySpan<byte> data) Parameters Type Name Description ReadOnlySpan < Byte > data Buffer with region data. Exceptions Type Condition ArgumentOutOfRangeException Length of data buffer not enough for creation. Fields | Improve this Doc View Source Origin Origin point of region. Declaration public Vector2d<T> Origin Field Value Type Description Vector2d <T> | Improve this Doc View Source Size Size of region. Declaration public Vector2d<T> Size Field Value Type Description Vector2d <T> Properties | Improve this Doc View Source End Point where region is ends. Declaration public readonly Vector2d<T> End { get; } Property Value Type Description Vector2d <T> | Improve this Doc View Source Height Region height. Declaration public readonly T Height { get; } Property Value Type Description T | Improve this Doc View Source Width Region width. Declaration public readonly T Width { get; } Property Value Type Description T"
  },
  "api/NiTiS.Math.Geometry.Region3d-1.html": {
    "href": "api/NiTiS.Math.Geometry.Region3d-1.html",
    "title": "Struct Region3d<T>",
    "keywords": "Struct Region3d<T> Third-dimension region with origin point and size. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : NiTiS.Math.Geometry Assembly : NiTiS.Math.dll Syntax public struct Region3d<T> where T : struct, INumberBase<T> Type Parameters Name Description T Region type. Constructors | Improve this Doc View Source Region3d(T, T, T, T, T, T) Creates new region with origin point( originX , originY ) and size( sizeX , sizeY ). Declaration public Region3d(T originX, T originY, T originZ, T sizeX, T sizeY, T sizeZ) Parameters Type Name Description T originX Region origin point X. T originY Region origin point Y. T originZ Region origin point Z. T sizeX Region size X. T sizeY Region size Y. T sizeZ Region size Z. | Improve this Doc View Source Region3d(T, T, T, Vector3d<T>) Creates new region with origin point( originX , originY ) and size . Declaration public Region3d(T originX, T originY, T originZ, Vector3d<T> size) Parameters Type Name Description T originX Region origin point X. T originY Region origin point Y. T originZ Region origin point Z. Vector3d <T> size Region size. | Improve this Doc View Source Region3d(Vector3d<T>, T, T, T) Creates new region with origin point and size( sizeX , sizeY ). Declaration public Region3d(Vector3d<T> origin, T sizeX, T sizeY, T sizeZ) Parameters Type Name Description Vector3d <T> origin Region origin point. T sizeX Region size X. T sizeY Region size Y. T sizeZ Region size Z. | Improve this Doc View Source Region3d(Vector3d<T>, Vector3d<T>) Creates new region with origin point and size . Declaration public Region3d(Vector3d<T> origin, Vector3d<T> size) Parameters Type Name Description Vector3d <T> origin Region origin point. Vector3d <T> size Region size. | Improve this Doc View Source Region3d(ReadOnlySpan<T>) Creates region by buffer. Declaration public Region3d(ReadOnlySpan<T> data) Parameters Type Name Description ReadOnlySpan <T> data Buffer with region data. Exceptions Type Condition ArgumentOutOfRangeException Length of data buffer not enough for creation. | Improve this Doc View Source Region3d(ReadOnlySpan<Byte>) Creates region by buffer. Declaration public Region3d(ReadOnlySpan<byte> data) Parameters Type Name Description ReadOnlySpan < Byte > data Buffer with region data. Exceptions Type Condition ArgumentOutOfRangeException Length of data buffer not enough for creation. Fields | Improve this Doc View Source Origin Origin point of region. Declaration public Vector3d<T> Origin Field Value Type Description Vector3d <T> | Improve this Doc View Source Size Size of region. Declaration public Vector3d<T> Size Field Value Type Description Vector3d <T> Properties | Improve this Doc View Source Depth Region depth. Declaration public readonly T Depth { get; } Property Value Type Description T | Improve this Doc View Source End Point where region is ends. Declaration public readonly Vector3d<T> End { get; } Property Value Type Description Vector3d <T> | Improve this Doc View Source Height Region height. Declaration public readonly T Height { get; } Property Value Type Description T | Improve this Doc View Source Width Region width. Declaration public readonly T Width { get; } Property Value Type Description T"
  },
  "api/NiTiS.Math.Geometry.Square.html": {
    "href": "api/NiTiS.Math.Geometry.Square.html",
    "title": "Class Square",
    "keywords": "Class Square Inheritance Object Square Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Math.Geometry Assembly : NiTiS.Math.dll Syntax public static class Square Methods | Improve this Doc View Source CreateInflated<T>(Square<T>, Vector2d<T>) Declaration public static Square<T> CreateInflated<T>(Square<T> square, Vector2d<T> point) where T : struct, INumber<T> Parameters Type Name Description Square <T> square Vector2d <T> point Returns Type Description Square <T> Type Parameters Name Description T | Improve this Doc View Source GetDistanceToNearestEdge<T>(Square<T>, Vector2d<T>) Declaration public static T GetDistanceToNearestEdge<T>(Square<T> box, Vector2d<T> point) where T : struct, INumber<T>, IRootFunctions<T> Parameters Type Name Description Square <T> box Vector2d <T> point Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetSquaredDistanceToNearestEdge<T>(Square<T>, Vector2d<T>) Declaration public static T GetSquaredDistanceToNearestEdge<T>(Square<T> box, Vector2d<T> point) where T : struct, INumber<T>, IRootFunctions<T> Parameters Type Name Description Square <T> box Vector2d <T> point Returns Type Description T Type Parameters Name Description T"
  },
  "api/NiTiS.Math.Geometry.Square-1.html": {
    "href": "api/NiTiS.Math.Geometry.Square-1.html",
    "title": "Struct Square<T>",
    "keywords": "Struct Square<T> Implements IEquatable < Square <T>> IEqualityOperators < Square <T>, Square <T>, Boolean > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : NiTiS.Math.Geometry Assembly : NiTiS.Math.dll Syntax public readonly struct Square<T> : IEquatable<Square<T>>, IEqualityOperators<Square<T>, Square<T>, bool> where T : struct, INumberBase<T>, IComparisonOperators<T, T, bool> Type Parameters Name Description T Constructors | Improve this Doc View Source Square(T, T, T, T) Declaration public Square(T minX, T minY, T maxX, T maxY) Parameters Type Name Description T minX T minY T maxX T maxY | Improve this Doc View Source Square(T, T, Vector2d<T>) Declaration public Square(T minX, T minY, Vector2d<T> max) Parameters Type Name Description T minX T minY Vector2d <T> max | Improve this Doc View Source Square(Vector2d<T>, T, T) Declaration public Square(Vector2d<T> min, T maxX, T maxY) Parameters Type Name Description Vector2d <T> min T maxX T maxY | Improve this Doc View Source Square(Vector2d<T>, Vector2d<T>) Declaration public Square(Vector2d<T> min, Vector2d<T> max) Parameters Type Name Description Vector2d <T> min Vector2d <T> max Fields | Improve this Doc View Source Max Declaration public readonly Vector2d<T> Max Field Value Type Description Vector2d <T> | Improve this Doc View Source Min Declaration public readonly Vector2d<T> Min Field Value Type Description Vector2d <T> Properties | Improve this Doc View Source Center Declaration public readonly Vector2d<T> Center { get; } Property Value Type Description Vector2d <T> | Improve this Doc View Source Size Declaration public readonly Vector2d<T> Size { get; } Property Value Type Description Vector2d <T> Methods | Improve this Doc View Source Contains(Square<T>) Declaration public readonly bool Contains(Square<T> point) Parameters Type Name Description Square <T> point Returns Type Description Boolean | Improve this Doc View Source Contains(Vector2d<T>) Declaration public readonly bool Contains(Vector2d<T> point) Parameters Type Name Description Vector2d <T> point Returns Type Description Boolean | Improve this Doc View Source Equals(Square<T>) Declaration public readonly bool Equals(Square<T> other) Parameters Type Name Description Square <T> other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source GetScaled(Vector2d<T>, Vector2d<T>) Declaration public readonly Square<T> GetScaled(Vector2d<T> scale, Vector2d<T> anchor) Parameters Type Name Description Vector2d <T> scale Vector2d <T> anchor Returns Type Description Square <T> | Improve this Doc View Source GetTranslated(Vector2d<T>) Declaration public readonly Square<T> GetTranslated(Vector2d<T> distance) Parameters Type Name Description Vector2d <T> distance Returns Type Description Square <T> Operators | Improve this Doc View Source Equality(Square<T>, Square<T>) Declaration public static bool operator ==(Square<T> left, Square<T> right) Parameters Type Name Description Square <T> left Square <T> right Returns Type Description Boolean | Improve this Doc View Source Inequality(Square<T>, Square<T>) Declaration public static bool operator !=(Square<T> left, Square<T> right) Parameters Type Name Description Square <T> left Square <T> right Returns Type Description Boolean Implements System.IEquatable<T> System.Numerics.IEqualityOperators<TSelf,TOther,TResult>"
  },
  "api/NiTiS.Math.html": {
    "href": "api/NiTiS.Math.html",
    "title": "Namespace NiTiS.Math",
    "keywords": "Namespace NiTiS.Math Classes Scalar Provides methods for scalar units. Vector2d Vector3d Vector4d Structs Vector2d<N> Two-dimension vector with direction and magnitude. Vector3d<N> Third-dimension vector with direction and magnitude. Vector4d<N> Fourth-dimension vector with direction and magnitude."
  },
  "api/NiTiS.Math.Matrices.html": {
    "href": "api/NiTiS.Math.Matrices.html",
    "title": "Namespace NiTiS.Math.Matrices",
    "keywords": "Namespace NiTiS.Math.Matrices Classes Matrix4x4 Structs Matrix2x2<N> Represents a 2x2 matrix. Matrix4x4<N> Represents a 4x4 matrix."
  },
  "api/NiTiS.Math.Matrices.Matrix2x2-1.html": {
    "href": "api/NiTiS.Math.Matrices.Matrix2x2-1.html",
    "title": "Struct Matrix2x2<N>",
    "keywords": "Struct Matrix2x2<N> Represents a 2x2 matrix. Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : NiTiS.Math.Matrices Assembly : NiTiS.Math.dll Syntax public struct Matrix2x2<N> where N : struct, INumberBase<N> Type Parameters Name Description N Matrix data type. Constructors | Improve this Doc View Source Matrix2x2(N, N, N, N) Declaration public Matrix2x2(N m11, N m12, N m21, N m22) Parameters Type Name Description N m11 N m12 N m21 N m22 Fields | Improve this Doc View Source ColumnsCount Declaration public const int ColumnsCount = 2 Field Value Type Description Int32 | Improve this Doc View Source ElementCount Declaration public const int ElementCount = 4 Field Value Type Description Int32 | Improve this Doc View Source M11 Declaration public N M11 Field Value Type Description N | Improve this Doc View Source M12 Declaration public N M12 Field Value Type Description N | Improve this Doc View Source M21 Declaration public N M21 Field Value Type Description N | Improve this Doc View Source M22 Declaration public N M22 Field Value Type Description N | Improve this Doc View Source RowsCount Declaration public const int RowsCount = 2 Field Value Type Description Int32 Properties | Improve this Doc View Source Column1 Declaration public readonly Vector2d<N> Column1 { get; } Property Value Type Description Vector2d <N> | Improve this Doc View Source Column2 Declaration public readonly Vector2d<N> Column2 { get; } Property Value Type Description Vector2d <N> | Improve this Doc View Source Identity Declaration public static readonly Matrix2x2<N> Identity { get; } Property Value Type Description Matrix2x2 <N> | Improve this Doc View Source IsIdentity Indicates whether the current matrix is the identity matrix. Declaration public readonly bool IsIdentity { get; } Property Value Type Description Boolean true if the current matrix is the identity matrix; otherwise: false . | Improve this Doc View Source Item[Int32] Declaration public readonly N this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description N | Improve this Doc View Source Item[Int32, Int32] Declaration public readonly N this[int x_, int _x] { get; } Parameters Type Name Description Int32 x_ Int32 _x Property Value Type Description N | Improve this Doc View Source Row1 Declaration public readonly Vector2d<N> Row1 { get; } Property Value Type Description Vector2d <N> | Improve this Doc View Source Row2 Declaration public readonly Vector2d<N> Row2 { get; } Property Value Type Description Vector2d <N> Methods | Improve this Doc View Source Equals(Matrix2x2<N>) Check equality to another matrix. Declaration public readonly bool Equals(Matrix2x2<N> mat) Parameters Type Name Description Matrix2x2 <N> mat The second matrix. Returns Type Description Boolean true when other matrix is equal to this one, otherwise false . | Improve this Doc View Source Equals(Object) Check equality to another matrix. Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Object for equality. Returns Type Description Boolean true when object is matrix that equal to this one, otherwise false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override readonly string ToString() Returns Type Description String Overrides ValueType.ToString() Operators | Improve this Doc View Source Addition(Matrix2x2<N>, N) Add scalar to matrix. Declaration public static Matrix2x2<N> operator +(Matrix2x2<N> left, N right) Parameters Type Name Description Matrix2x2 <N> left The left argument. N right The right argument. Returns Type Description Matrix2x2 <N> Resulting matrix - result of addition right scalar to left matrix. | Improve this Doc View Source Addition(Matrix2x2<N>, Matrix2x2<N>) Add one matrix to another one. Declaration public static Matrix2x2<N> operator +(Matrix2x2<N> left, Matrix2x2<N> right) Parameters Type Name Description Matrix2x2 <N> left The left argument. Matrix2x2 <N> right The right argument. Returns Type Description Matrix2x2 <N> Resulting matrix - result of addition right to left matrix. | Improve this Doc View Source Equality(Matrix2x2<N>, N) Declaration public static bool operator ==(Matrix2x2<N> left, N right) Parameters Type Name Description Matrix2x2 <N> left N right Returns Type Description Boolean | Improve this Doc View Source Equality(Matrix2x2<N>, Matrix2x2<N>) Declaration public static bool operator ==(Matrix2x2<N> left, Matrix2x2<N> right) Parameters Type Name Description Matrix2x2 <N> left Matrix2x2 <N> right Returns Type Description Boolean | Improve this Doc View Source Inequality(Matrix2x2<N>, N) Declaration public static bool operator !=(Matrix2x2<N> left, N right) Parameters Type Name Description Matrix2x2 <N> left N right Returns Type Description Boolean | Improve this Doc View Source Inequality(Matrix2x2<N>, Matrix2x2<N>) Declaration public static bool operator !=(Matrix2x2<N> left, Matrix2x2<N> right) Parameters Type Name Description Matrix2x2 <N> left Matrix2x2 <N> right Returns Type Description Boolean | Improve this Doc View Source Multiply(Matrix2x2<N>, N) Multiply matrix by scalar. Declaration public static Matrix2x2<N> operator *(Matrix2x2<N> left, N right) Parameters Type Name Description Matrix2x2 <N> left The left argument. N right The right argument. Returns Type Description Matrix2x2 <N> Resulting matrix - result of multiplication of left matrix and right scalar. | Improve this Doc View Source Multiply(Matrix2x2<N>, Matrix2x2<N>) Multiply two matrices. Declaration public static Matrix2x2<N> operator *(Matrix2x2<N> left, Matrix2x2<N> right) Parameters Type Name Description Matrix2x2 <N> left The left argument. Matrix2x2 <N> right The right argument. Returns Type Description Matrix2x2 <N> Resulting matrix - result of multiplication of left and right matrices. | Improve this Doc View Source Subtraction(Matrix2x2<N>, N) Subtract scalar from matrix. Declaration public static Matrix2x2<N> operator -(Matrix2x2<N> left, N right) Parameters Type Name Description Matrix2x2 <N> left The left argument. N right The right argument. Returns Type Description Matrix2x2 <N> Resulting matrix - result of subtraction right scalar from left matrix. | Improve this Doc View Source Subtraction(Matrix2x2<N>, Matrix2x2<N>) Subtract one matrix from another one. Declaration public static Matrix2x2<N> operator -(Matrix2x2<N> left, Matrix2x2<N> right) Parameters Type Name Description Matrix2x2 <N> left The left argument. Matrix2x2 <N> right The right argument. Returns Type Description Matrix2x2 <N> Resulting matrix - result of subtraction right from left matrix."
  },
  "api/NiTiS.Math.Matrices.Matrix4x4.html": {
    "href": "api/NiTiS.Math.Matrices.Matrix4x4.html",
    "title": "Class Matrix4x4",
    "keywords": "Class Matrix4x4 Inheritance Object Matrix4x4 Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Math.Matrices Assembly : NiTiS.Math.dll Syntax public static class Matrix4x4 Methods | Improve this Doc View Source Add(Matrix4x4<Single>, Matrix4x4<Single>) Adds each element in one matrix with its corresponding element in a second matrix. Declaration public static Matrix4x4<float> Add(Matrix4x4<float> left, Matrix4x4<float> right) Parameters Type Name Description Matrix4x4 < Single > left The first matrix. Matrix4x4 < Single > right The second matrix. Returns Type Description Matrix4x4 < Single > The matrix that contains the summed values of left and right . | Improve this Doc View Source Add(Matrix4x4<Single>, Single) Adds right value in each element of a second matrix. Declaration public static Matrix4x4<float> Add(Matrix4x4<float> left, float right) Parameters Type Name Description Matrix4x4 < Single > left The first matrix. Single right The second value. Returns Type Description Matrix4x4 < Single > The matrix that contains the summed values of left and right . | Improve this Doc View Source Add<T>(Matrix4x4<T>, T) Adds right value in each element of a second matrix. Declaration public static Matrix4x4<T> Add<T>(Matrix4x4<T> left, T right) where T : struct, INumberBase<T> Parameters Type Name Description Matrix4x4 <T> left The first matrix. T right The second value. Returns Type Description Matrix4x4 <T> The matrix that contains the summed values of left and right . Type Parameters Name Description T | Improve this Doc View Source Add<T>(Matrix4x4<T>, Matrix4x4<T>) Adds each element in one matrix with its corresponding element in a second matrix. Declaration public static Matrix4x4<T> Add<T>(Matrix4x4<T> left, Matrix4x4<T> right) where T : struct, INumberBase<T> Parameters Type Name Description Matrix4x4 <T> left The first matrix. Matrix4x4 <T> right The second matrix. Returns Type Description Matrix4x4 <T> The matrix that contains the summed values of left and right . Type Parameters Name Description T | Improve this Doc View Source ConvertToGeneric(Matrix4x4) Declaration public static Matrix4x4<float> ConvertToGeneric(this Matrix4x4 matrix) Parameters Type Name Description Matrix4x4 matrix Returns Type Description Matrix4x4 < Single > | Improve this Doc View Source ConvertToSystem(Matrix4x4<Single>) Declaration public static Matrix4x4 ConvertToSystem(this Matrix4x4<float> matrix) Parameters Type Name Description Matrix4x4 < Single > matrix Returns Type Description Matrix4x4 | Improve this Doc View Source CreateBillboard(Vector3d<Single>, Vector3d<Single>, Vector3d<Single>, Vector3d<Single>) Creates a spherical billboard that rotates around a specified object position. Declaration public static Matrix4x4<float> CreateBillboard(Vector3d<float> ojbectPosition, Vector3d<float> cameraPosition, Vector3d<float> cameraUp, Vector3d<float> cameraForward) Parameters Type Name Description Vector3d < Single > ojbectPosition The position of the object that the billboard will rotate around. Vector3d < Single > cameraPosition The position of the camera. Vector3d < Single > cameraUp The up vector of the camera. Vector3d < Single > cameraForward The forward vector of the camera. Returns Type Description Matrix4x4 < Single > The created billboard. | Improve this Doc View Source CreateConstrainedBillboard(Vector3d<Single>, Vector3d<Single>, Vector3d<Single>, Vector3d<Single>, Vector3d<Single>) Creates a cylindrical billboard that rotates around a specified axis. Declaration public static Matrix4x4<float> CreateConstrainedBillboard(Vector3d<float> objectPosition, Vector3d<float> cameraPosition, Vector3d<float> rotateAxis, Vector3d<float> cameraForward, Vector3d<float> objectForward) Parameters Type Name Description Vector3d < Single > objectPosition The position of the object that the billboard will rotate around. Vector3d < Single > cameraPosition The position of the camera. Vector3d < Single > rotateAxis The axis to rotate the billboard around. Vector3d < Single > cameraForward The forward vector of the camera. Vector3d < Single > objectForward The forward vector of the object. Returns Type Description Matrix4x4 < Single > The billboard matrix. | Improve this Doc View Source CreateFromAxisAngle<T>(Vector3d<T>, T) Creates a matrix that rotates around an arbitrary vector. Declaration public static Matrix4x4<T> CreateFromAxisAngle<T>(Vector3d<T> axis, T angle) where T : struct, INumberBase<T>, ITrigonometricFunctions<T> Parameters Type Name Description Vector3d <T> axis The axis to rotate around. T angle The angle to rotate around axis, in radians. Returns Type Description Matrix4x4 <T> The rotation matrix. Type Parameters Name Description T | Improve this Doc View Source CreateFromQuaternion<T>(Quaternion<T>) Creates a rotation matrix from the specified Quaternion rotation value. Declaration public static Matrix4x4<T> CreateFromQuaternion<T>(Quaternion<T> quaternion) where T : struct, INumberBase<T> Parameters Type Name Description Quaternion <T> quaternion The source Quaternion. Returns Type Description Matrix4x4 <T> The rotation matrix. Type Parameters Name Description T | Improve this Doc View Source CreateFromYawPitchRoll<T>(T, T, T) Creates a rotation matrix from the specified yaw, pitch, and roll. Declaration public static Matrix4x4<T> CreateFromYawPitchRoll<T>(T yaw, T pitch, T roll) where T : struct, INumberBase<T>, ITrigonometricFunctions<T> Parameters Type Name Description T yaw The angle of rotation, in radians, around the Y axis. T pitch The angle of rotation, in radians, around the X axis. T roll The angle of rotation, in radians, around the Z axis. Returns Type Description Matrix4x4 <T> The rotation matrix. Type Parameters Name Description T | Improve this Doc View Source CreateLookAt<T>(Vector3d<T>, Vector3d<T>, Vector3d<T>) Creates a view matrix. Declaration public static Matrix4x4<T> CreateLookAt<T>(Vector3d<T> cameraPosition, Vector3d<T> cameraTarget, Vector3d<T> cameraUpVector) where T : struct, INumberBase<T>, IRootFunctions<T> Parameters Type Name Description Vector3d <T> cameraPosition The position of the camera. Vector3d <T> cameraTarget The target towards which the camera is pointing. Vector3d <T> cameraUpVector The direction that is \"up\" from the camera's point of view. Returns Type Description Matrix4x4 <T> The view matrix. Type Parameters Name Description T | Improve this Doc View Source CreateOrthographic<T>(T, T, T, T) Creates an orthographic perspective matrix from the given view volume dimensions. Declaration public static Matrix4x4<T> CreateOrthographic<T>(T width, T height, T zNearPlane, T zFarPlane) where T : struct, INumberBase<T> Parameters Type Name Description T width The width of the view volume. T height The height of the view volume. T zNearPlane The minimum Z-value of the view volume. T zFarPlane The maximum Z-value of the view volume. Returns Type Description Matrix4x4 <T> The orthographic projection matrix. Type Parameters Name Description T | Improve this Doc View Source CreateOrthographicOffCenter<T>(T, T, T, T, T, T) Creates a customized orthographic projection matrix. Declaration public static Matrix4x4<T> CreateOrthographicOffCenter<T>(T left, T right, T bottom, T top, T zNearPlane, T zFarPlane) where T : struct, INumberBase<T> Parameters Type Name Description T left The minimum X-value of the view volume. T right The maximum X-value of the view volume. T bottom The minimum Y-value of the view volume. T top The maximum Y-value of the view volume. T zNearPlane The minimum Z-value of the view volume. T zFarPlane The maximum Z-value of the view volume. Returns Type Description Matrix4x4 <T> The orthographic projection matrix. Type Parameters Name Description T | Improve this Doc View Source CreatePerspective<T>(T, T, T, T) Creates a perspective projection matrix from the given view volume dimensions. Declaration public static Matrix4x4<T> CreatePerspective<T>(T width, T height, T nearPlaneDistance, T farPlaneDistance) where T : struct, INumberBase<T>, IComparisonOperators<T, T, bool> Parameters Type Name Description T width The width of the view volume at the near view plane. T height The height of the view volume at the near view plane. T nearPlaneDistance The distance to the near view plane. T farPlaneDistance The distance to the far view plane. Returns Type Description Matrix4x4 <T> The perspective projection matrix. Type Parameters Name Description T Exceptions Type Condition ArgumentOutOfRangeException nearPlaneDistance is less than or equal to zero. -or- farPlaneDistance is less than or equal to zero. -or- nearPlaneDistance is greater than or equal to farPlaneDistance . | Improve this Doc View Source CreatePerspectiveFieldOfView<T>(T, T, T, T) Creates a perspective projection matrix based on a field of view, aspect ratio, and near and far view plane distances. Declaration public static Matrix4x4<T> CreatePerspectiveFieldOfView<T>(T fieldOfView, T aspectRatio, T nearPlaneDistance, T farPlaneDistance) where T : struct, INumberBase<T>, ITrigonometricFunctions<T>, IComparisonOperators<T, T, bool> Parameters Type Name Description T fieldOfView The field of view in the y direction, in radians. T aspectRatio The aspect ratio, defined as view space width divided by height. T nearPlaneDistance The distance to the near view plane. T farPlaneDistance The distance to the far view plane. Returns Type Description Matrix4x4 <T> The perspective projection matrix. Type Parameters Name Description T Exceptions Type Condition ArgumentOutOfRangeException fieldOfView is less than or equal to zero. -or- fieldOfView is greater than or equal to . nearPlaneDistance is less than or equal to zero. -or- farPlaneDistance is less than or equal to zero. -or- nearPlaneDistance is greater than or equal to farPlaneDistance . | Improve this Doc View Source CreatePerspectiveOffCenter<T>(T, T, T, T, T, T) Creates a customized perspective projection matrix. Declaration public static Matrix4x4<T> CreatePerspectiveOffCenter<T>(T left, T right, T bottom, T top, T nearPlaneDistance, T farPlaneDistance) where T : struct, INumberBase<T>, IComparisonOperators<T, T, bool> Parameters Type Name Description T left The minimum x-value of the view volume at the near view plane. T right The maximum x-value of the view volume at the near view plane. T bottom The minimum y-value of the view volume at the near view plane. T top The maximum y-value of the view volume at the near view plane. T nearPlaneDistance The distance to the near view plane. T farPlaneDistance The distance to the far view plane. Returns Type Description Matrix4x4 <T> The perspective projection matrix. Type Parameters Name Description T Exceptions Type Condition ArgumentOutOfRangeException nearPlaneDistance is less than or equal to zero. -or- farPlaneDistance is less than or equal to zero. -or- nearPlaneDistance is greater than or equal to farPlaneDistance . | Improve this Doc View Source CreateReflection<T>(Plane<T>) Creates a matrix that reflects the coordinate system about a specified plane. Declaration [Obsolete(\"\")] public static Matrix4x4<T> CreateReflection<T>(Plane<T> value) where T : struct, INumberBase<T> Parameters Type Name Description Plane <T> value The plane about which to create a reflection. Returns Type Description Matrix4x4 <T> A new matrix expressing the reflection. Type Parameters Name Description T | Improve this Doc View Source CreateRotationX<T>(T) Creates a matrix for rotating points around the X axis. Declaration public static Matrix4x4<T> CreateRotationX<T>(T radians) where T : struct, INumberBase<T>, ITrigonometricFunctions<T> Parameters Type Name Description T radians The amount, in radians, by which to rotate around the X axis. Returns Type Description Matrix4x4 <T> The rotation matrix. Type Parameters Name Description T | Improve this Doc View Source CreateRotationX<T>(T, Vector3d<T>) Creates a matrix for rotating points around the X axis from a center point. Declaration public static Matrix4x4<T> CreateRotationX<T>(T radians, Vector3d<T> centerPoint) where T : struct, INumberBase<T>, ITrigonometricFunctions<T> Parameters Type Name Description T radians The amount, in radians, by which to rotate around the X axis. Vector3d <T> centerPoint The center point. Returns Type Description Matrix4x4 <T> The rotation matrix. Type Parameters Name Description T | Improve this Doc View Source CreateRotationY<T>(T) Creates a matrix for rotating points around the Y axis. Declaration public static Matrix4x4<T> CreateRotationY<T>(T radians) where T : struct, INumberBase<T>, ITrigonometricFunctions<T> Parameters Type Name Description T radians The amount, in radians, by which to rotate around the Y-axis. Returns Type Description Matrix4x4 <T> The rotation matrix. Type Parameters Name Description T | Improve this Doc View Source CreateRotationY<T>(T, Vector3d<T>) The amount, in radians, by which to rotate around the Y axis from a center point. Declaration public static Matrix4x4<T> CreateRotationY<T>(T radians, Vector3d<T> centerPoint) where T : struct, INumberBase<T>, ITrigonometricFunctions<T> Parameters Type Name Description T radians The amount, in radians, by which to rotate around the Y-axis. Vector3d <T> centerPoint The center point. Returns Type Description Matrix4x4 <T> The rotation matrix. Type Parameters Name Description T | Improve this Doc View Source CreateRotationZ<T>(T) Creates a matrix for rotating points around the Z axis. Declaration public static Matrix4x4<T> CreateRotationZ<T>(T radians) where T : struct, INumberBase<T>, ITrigonometricFunctions<T> Parameters Type Name Description T radians The amount, in radians, by which to rotate around the Z-axis. Returns Type Description Matrix4x4 <T> The rotation matrix. Type Parameters Name Description T | Improve this Doc View Source CreateRotationZ<T>(T, Vector3d<T>) Creates a matrix for rotating points around the Z axis from a center point. Declaration public static Matrix4x4<T> CreateRotationZ<T>(T radians, Vector3d<T> centerPoint) where T : struct, INumberBase<T>, ITrigonometricFunctions<T> Parameters Type Name Description T radians The amount, in radians, by which to rotate around the Z-axis. Vector3d <T> centerPoint The center point. Returns Type Description Matrix4x4 <T> The rotation matrix Type Parameters Name Description T | Improve this Doc View Source CreateScale<T>(T) Creates a uniform scaling matrix that scale equally on each axis. Declaration public static Matrix4x4<T> CreateScale<T>(T scale) where T : struct, INumberBase<T> Parameters Type Name Description T scale The uniform scaling factor. Returns Type Description Matrix4x4 <T> The scaling matrix. Type Parameters Name Description T | Improve this Doc View Source CreateScale<T>(T, T, T) Creates a scaling matrix from the specified X, Y, and Z components. Declaration public static Matrix4x4<T> CreateScale<T>(T xScale, T yScale, T zScale) where T : struct, INumberBase<T> Parameters Type Name Description T xScale The value to scale by on the X axis. T yScale The value to scale by on the Y axis. T zScale The value to scale by on the Z axis. Returns Type Description Matrix4x4 <T> The scaling matrix. Type Parameters Name Description T | Improve this Doc View Source CreateScale<T>(T, T, T, Vector3d<T>) Creates a scaling matrix that is offset by a given center point. Declaration public static Matrix4x4<T> CreateScale<T>(T xScale, T yScale, T zScale, Vector3d<T> centerPoint) where T : struct, INumberBase<T> Parameters Type Name Description T xScale The value to scale by on the X axis. T yScale The value to scale by on the Y axis. T zScale The value to scale by on the Z axis. Vector3d <T> centerPoint The center point. Returns Type Description Matrix4x4 <T> The scaling matrix. Type Parameters Name Description T | Improve this Doc View Source CreateScale<T>(T, Vector3d<T>) Creates a uniform scaling matrix that scales equally on each axis with a center point. Declaration public static Matrix4x4<T> CreateScale<T>(T scale, Vector3d<T> centerPoint) where T : struct, INumberBase<T> Parameters Type Name Description T scale The uniform scaling factor. Vector3d <T> centerPoint The center point. Returns Type Description Matrix4x4 <T> The scaling matrix. Type Parameters Name Description T | Improve this Doc View Source CreateScale<T>(Vector3d<T>) Creates a scaling matrix from the specified vector scale. Declaration public static Matrix4x4<T> CreateScale<T>(Vector3d<T> scales) where T : struct, INumberBase<T> Parameters Type Name Description Vector3d <T> scales The scale to use. Returns Type Description Matrix4x4 <T> The scaling matrix. Type Parameters Name Description T | Improve this Doc View Source CreateScale<T>(Vector3d<T>, Vector3d<T>) Creates a scaling matrix with a center point. Declaration public static Matrix4x4<T> CreateScale<T>(Vector3d<T> scales, Vector3d<T> centerPoint) where T : struct, INumberBase<T> Parameters Type Name Description Vector3d <T> scales The vector that contains the amount to scale on each axis. Vector3d <T> centerPoint The center point. Returns Type Description Matrix4x4 <T> The scaling matrix. Type Parameters Name Description T | Improve this Doc View Source CreateShadow<T>(Vector3d<T>, Plane<T>) Creates a matrix that flattens geometry into a specified plane as if casting a shadow from a specified light source. Declaration public static Matrix4x4<T> CreateShadow<T>(Vector3d<T> lightDirection, Plane<T> plane) where T : struct, INumberBase<T> Parameters Type Name Description Vector3d <T> lightDirection The direction from which the light that will cast the shadow is coming. Plane <T> plane The plane onto which the new matrix should flatten geometry so as to cast a shadow. Returns Type Description Matrix4x4 <T> A new matrix that can be used to flatten geometry onto the specified plane from the specified direction. Type Parameters Name Description T | Improve this Doc View Source CreateTranslation<T>(T, T, T) Creates a translation matrix from the specified X, Y, and Z components. Declaration public static Matrix4x4<T> CreateTranslation<T>(T xPosition, T yPosition, T zPosition) where T : struct, INumberBase<T> Parameters Type Name Description T xPosition The amount to translate on the X axis. T yPosition The amount to translate on the Y axis. T zPosition The amount to translate on the Z axis. Returns Type Description Matrix4x4 <T> The translation matrix. Type Parameters Name Description T | Improve this Doc View Source CreateTranslation<T>(Vector3d<T>) Creates a translation matrix from the specified 3-dimensional vector. Declaration public static Matrix4x4<T> CreateTranslation<T>(Vector3d<T> position) where T : struct, INumberBase<T> Parameters Type Name Description Vector3d <T> position The amount to translate in each axis. Returns Type Description Matrix4x4 <T> The translation matrix. Type Parameters Name Description T | Improve this Doc View Source CreateWorld<T>(Vector3d<T>, Vector3d<T>, Vector3d<T>) Creates a world matrix with the specified parameters. Declaration public static Matrix4x4<T> CreateWorld<T>(Vector3d<T> position, Vector3d<T> forward, Vector3d<T> up) where T : struct, INumberBase<T>, IRootFunctions<T> Parameters Type Name Description Vector3d <T> position The position of the object. Vector3d <T> forward The forward direction of the object. Vector3d <T> up The upward direction of the object. Its value is usually [0, 1, 0] . Returns Type Description Matrix4x4 <T> The world matrix. Type Parameters Name Description T Remarks position is used in translation operations. | Improve this Doc View Source Decompose(Matrix4x4<Single>, out Vector3d<Single>, out Quaternion<Single>, out Vector3d<Single>) Attempts to extract the scale, translation, and rotation components from the given scale, rotation, or translation matrix. The return value indicates whether the operation succeeded. Declaration [Obsolete(\"\")] public static bool Decompose(Matrix4x4<float> matrix, out Vector3d<float> scale, out Quaternion<float> rotation, out Vector3d<float> translation) Parameters Type Name Description Matrix4x4 < Single > matrix The source matrix. Vector3d < Single > scale When this method returns, contains the scaling component of the transformation matrix if the operation succeeded. Quaternion < Single > rotation When this method returns, contains the rotation component of the transformation matrix if the operation succeeded. Vector3d < Single > translation When the method returns, contains the translation component of the transformation matrix if the operation succeeded. Returns Type Description Boolean true if matrix was decomposed successfully; otherwise, false . | Improve this Doc View Source Decompose<T>(Matrix4x4<T>, out Vector3d<T>, out Quaternion<T>, out Vector3d<T>) Attempts to extract the scale, translation, and rotation components from the given scale, rotation, or translation matrix. The return value indicates whether the operation succeeded. Declaration [Obsolete(\"\")] public static bool Decompose<T>(Matrix4x4<T> matrix, out Vector3d<T> scale, out Quaternion<T> rotation, out Vector3d<T> translation) where T : struct, INumberBase<T>, IRootFunctions<T>, IComparisonOperators<T, T, bool>, IComparisonOperators<T, float, bool> Parameters Type Name Description Matrix4x4 <T> matrix The source matrix Vector3d <T> scale When this method returns, contains the scaling component of the transformation matrix if the operation succeeded. Quaternion <T> rotation When this method returns, contains the rotation component of the transformation matrix if the operation succeeded. Vector3d <T> translation When the method returns, contains the translation component of the transformation matrix if the operation succeeded. Returns Type Description Boolean true if matrix was decomposed successfully; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source Invert(Matrix4x4<Single>, out Matrix4x4<Single>) Tries to invert the specified matrix. The return value indicates whether the operation succeeded. Declaration public static bool Invert(Matrix4x4<float> matrix, out Matrix4x4<float> result) Parameters Type Name Description Matrix4x4 < Single > matrix The matrix to invert. Matrix4x4 < Single > result When this method returns, contains the inverted matrix if the operation succeeded. Returns Type Description Boolean true if matrix was converted successfully; otherwise, false . | Improve this Doc View Source Invert<T>(Matrix4x4<T>, out Matrix4x4<T>) Tries to invert the specified matrix. The return value indicates whether the operation succeeded. Declaration public static bool Invert<T>(Matrix4x4<T> matrix, out Matrix4x4<T> result) where T : struct, INumberBase<T>, IFloatingPointIeee754<T> Parameters Type Name Description Matrix4x4 <T> matrix The matrix to invert. Matrix4x4 <T> result When this method returns, contains the inverted matrix if the operation succeeded. Returns Type Description Boolean true if matrix was converted successfully; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source Multiply(Matrix4x4<Single>, Matrix4x4<Single>) Multiplies two matrices together to compute the product. Declaration public static Matrix4x4<float> Multiply(Matrix4x4<float> left, Matrix4x4<float> right) Parameters Type Name Description Matrix4x4 < Single > left The first matrix. Matrix4x4 < Single > right The second matrix. Returns Type Description Matrix4x4 < Single > The product matrix. | Improve this Doc View Source Multiply(Matrix4x4<Single>, Single) Multiplies a matrix by a float to compute the product. Declaration public static Matrix4x4<float> Multiply(Matrix4x4<float> left, float right) Parameters Type Name Description Matrix4x4 < Single > left The matrix to scale. Single right The scaling value to use. Returns Type Description Matrix4x4 < Single > The scaled matrix. | Improve this Doc View Source Multiply<T>(Matrix4x4<T>, T) Multiplies a matrix by a float to compute the product. Declaration public static Matrix4x4<T> Multiply<T>(Matrix4x4<T> left, T right) where T : struct, INumberBase<T> Parameters Type Name Description Matrix4x4 <T> left The matrix to scale. T right The scaling value to use. Returns Type Description Matrix4x4 <T> The scaled matrix. Type Parameters Name Description T | Improve this Doc View Source Multiply<T>(Matrix4x4<T>, Matrix4x4<T>) Multiplies two matrices together to compute the product. Declaration public static Matrix4x4<T> Multiply<T>(Matrix4x4<T> left, Matrix4x4<T> right) where T : struct, INumberBase<T> Parameters Type Name Description Matrix4x4 <T> left The first matrix. Matrix4x4 <T> right The second matrix. Returns Type Description Matrix4x4 <T> The product matrix. Type Parameters Name Description T | Improve this Doc View Source Negate<T>(Matrix4x4<T>) Negates the specified matrix by multiplying all its values by -1. Declaration public static Matrix4x4<T> Negate<T>(Matrix4x4<T> value) where T : struct, INumberBase<T> Parameters Type Name Description Matrix4x4 <T> value The matrix to negate. Returns Type Description Matrix4x4 <T> The negated matrix. Type Parameters Name Description T | Improve this Doc View Source Subtract(Matrix4x4<Single>, Matrix4x4<Single>) Subtracts each element in a second matrix from its corresponding element in a first matrix. Declaration public static Matrix4x4<float> Subtract(Matrix4x4<float> left, Matrix4x4<float> right) Parameters Type Name Description Matrix4x4 < Single > left The first matrix. Matrix4x4 < Single > right The second matrix. Returns Type Description Matrix4x4 < Single > The matrix containing the values that result from subtracting each element in right from its corresponding element in left . | Improve this Doc View Source Subtract(Matrix4x4<Single>, Single) Subtracts second value from its corresponding element in a first matrix. Declaration public static Matrix4x4<float> Subtract(Matrix4x4<float> left, float right) Parameters Type Name Description Matrix4x4 < Single > left The first matrix. Single right The second value. Returns Type Description Matrix4x4 < Single > The matrix containing the values that result from subtracting right value from its corresponding element in left . | Improve this Doc View Source Subtract<T>(Matrix4x4<T>, T) Subtracts second value from its corresponding element in a first matrix. Declaration public static Matrix4x4<T> Subtract<T>(Matrix4x4<T> left, T right) where T : struct, INumberBase<T> Parameters Type Name Description Matrix4x4 <T> left The first matrix. T right The second value. Returns Type Description Matrix4x4 <T> The matrix containing the values that result from subtracting right value from its corresponding element in left . Type Parameters Name Description T | Improve this Doc View Source Subtract<T>(Matrix4x4<T>, Matrix4x4<T>) Subtracts each element in a second matrix from its corresponding element in a first matrix. Declaration public static Matrix4x4<T> Subtract<T>(Matrix4x4<T> left, Matrix4x4<T> right) where T : struct, INumberBase<T> Parameters Type Name Description Matrix4x4 <T> left The first matrix. Matrix4x4 <T> right The second matrix. Returns Type Description Matrix4x4 <T> The matrix containing the values that result from subtracting each element in right from its corresponding element in left . Type Parameters Name Description T"
  },
  "api/NiTiS.Math.Matrices.Matrix4x4-1.html": {
    "href": "api/NiTiS.Math.Matrices.Matrix4x4-1.html",
    "title": "Struct Matrix4x4<N>",
    "keywords": "Struct Matrix4x4<N> Represents a 4x4 matrix. Implements IAdditionOperators < Matrix4x4 <N>, Matrix4x4 <N>, Matrix4x4 <N>> ISubtractionOperators < Matrix4x4 <N>, Matrix4x4 <N>, Matrix4x4 <N>> IMultiplyOperators < Matrix4x4 <N>, Matrix4x4 <N>, Matrix4x4 <N>> IAdditionOperators < Matrix4x4 <N>, N, Matrix4x4 <N>> ISubtractionOperators < Matrix4x4 <N>, N, Matrix4x4 <N>> IMultiplyOperators < Matrix4x4 <N>, N, Matrix4x4 <N>> IEqualityOperators < Matrix4x4 <N>, Matrix4x4 <N>, Boolean > IEquatable < Matrix4x4 <N>> Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : NiTiS.Math.Matrices Assembly : NiTiS.Math.dll Syntax public struct Matrix4x4<N> : IAdditionOperators<Matrix4x4<N>, Matrix4x4<N>, Matrix4x4<N>>, ISubtractionOperators<Matrix4x4<N>, Matrix4x4<N>, Matrix4x4<N>>, IMultiplyOperators<Matrix4x4<N>, Matrix4x4<N>, Matrix4x4<N>>, IAdditionOperators<Matrix4x4<N>, N, Matrix4x4<N>>, ISubtractionOperators<Matrix4x4<N>, N, Matrix4x4<N>>, IMultiplyOperators<Matrix4x4<N>, N, Matrix4x4<N>>, IEqualityOperators<Matrix4x4<N>, Matrix4x4<N>, bool>, IEquatable<Matrix4x4<N>> where N : struct, INumberBase<N> Type Parameters Name Description N Matrix data type. Constructors | Improve this Doc View Source Matrix4x4(N, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N) Declaration public Matrix4x4(N m11, N m12, N m13, N m14, N m21, N m22, N m23, N m24, N m31, N m32, N m33, N m34, N m41, N m42, N m43, N m44) Parameters Type Name Description N m11 N m12 N m13 N m14 N m21 N m22 N m23 N m24 N m31 N m32 N m33 N m34 N m41 N m42 N m43 N m44 Fields | Improve this Doc View Source ColumnsCount Declaration public const int ColumnsCount = 4 Field Value Type Description Int32 | Improve this Doc View Source ElementCount Declaration public const int ElementCount = 16 Field Value Type Description Int32 | Improve this Doc View Source M11 Declaration public N M11 Field Value Type Description N | Improve this Doc View Source M12 Declaration public N M12 Field Value Type Description N | Improve this Doc View Source M13 Declaration public N M13 Field Value Type Description N | Improve this Doc View Source M14 Declaration public N M14 Field Value Type Description N | Improve this Doc View Source M21 Declaration public N M21 Field Value Type Description N | Improve this Doc View Source M22 Declaration public N M22 Field Value Type Description N | Improve this Doc View Source M23 Declaration public N M23 Field Value Type Description N | Improve this Doc View Source M24 Declaration public N M24 Field Value Type Description N | Improve this Doc View Source M31 Declaration public N M31 Field Value Type Description N | Improve this Doc View Source M32 Declaration public N M32 Field Value Type Description N | Improve this Doc View Source M33 Declaration public N M33 Field Value Type Description N | Improve this Doc View Source M34 Declaration public N M34 Field Value Type Description N | Improve this Doc View Source M41 Declaration public N M41 Field Value Type Description N | Improve this Doc View Source M42 Declaration public N M42 Field Value Type Description N | Improve this Doc View Source M43 Declaration public N M43 Field Value Type Description N | Improve this Doc View Source M44 Declaration public N M44 Field Value Type Description N | Improve this Doc View Source RowsCount Declaration public const int RowsCount = 4 Field Value Type Description Int32 Properties | Improve this Doc View Source Column1 Declaration public readonly Vector4d<N> Column1 { get; } Property Value Type Description Vector4d <N> | Improve this Doc View Source Column2 Declaration public readonly Vector4d<N> Column2 { get; } Property Value Type Description Vector4d <N> | Improve this Doc View Source Column3 Declaration public readonly Vector4d<N> Column3 { get; } Property Value Type Description Vector4d <N> | Improve this Doc View Source Column4 Declaration public readonly Vector4d<N> Column4 { get; } Property Value Type Description Vector4d <N> | Improve this Doc View Source Identity Declaration public static readonly Matrix4x4<N> Identity { get; } Property Value Type Description Matrix4x4 <N> | Improve this Doc View Source IsIdentity Indicates whether the current matrix is the identity matrix. Declaration public readonly bool IsIdentity { get; } Property Value Type Description Boolean true if the current matrix is the identity matrix; otherwise: false . | Improve this Doc View Source Item[Int32] Declaration public readonly N this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description N | Improve this Doc View Source Item[Int32, Int32] Declaration public readonly N this[int x_, int _x] { get; } Parameters Type Name Description Int32 x_ Int32 _x Property Value Type Description N | Improve this Doc View Source Row1 Declaration public readonly Vector4d<N> Row1 { get; } Property Value Type Description Vector4d <N> | Improve this Doc View Source Row2 Declaration public readonly Vector4d<N> Row2 { get; } Property Value Type Description Vector4d <N> | Improve this Doc View Source Row3 Declaration public readonly Vector4d<N> Row3 { get; } Property Value Type Description Vector4d <N> | Improve this Doc View Source Row4 Declaration public readonly Vector4d<N> Row4 { get; } Property Value Type Description Vector4d <N> | Improve this Doc View Source Translation Declaration public Vector3d<N> Translation { get; set; } Property Value Type Description Vector3d <N> Methods | Improve this Doc View Source Equals(Matrix4x4<N>) Check equality to another matrix. Declaration public readonly bool Equals(Matrix4x4<N> mat) Parameters Type Name Description Matrix4x4 <N> mat The second matrix. Returns Type Description Boolean true when other matrix is equal to this one, otherwise false . | Improve this Doc View Source Equals(Object) Check equality to another matrix. Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Object for equality. Returns Type Description Boolean true when object is matrix that equal to this one, otherwise false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetDeterminant() Calculates the determinant of the current 4x4 matrix Declaration public readonly N GetDeterminant() Returns Type Description N The determinant | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override readonly string ToString() Returns Type Description String Overrides ValueType.ToString() Operators | Improve this Doc View Source Addition(Matrix4x4<N>, N) Add scalar to matrix. Declaration public static Matrix4x4<N> operator +(Matrix4x4<N> left, N right) Parameters Type Name Description Matrix4x4 <N> left The left argument. N right The right argument. Returns Type Description Matrix4x4 <N> Resulting matrix - result of addition right scalar to left matrix. | Improve this Doc View Source Addition(Matrix4x4<N>, Matrix4x4<N>) Add one matrix to another one. Declaration public static Matrix4x4<N> operator +(Matrix4x4<N> left, Matrix4x4<N> right) Parameters Type Name Description Matrix4x4 <N> left The left argument. Matrix4x4 <N> right The right argument. Returns Type Description Matrix4x4 <N> Resulting matrix - result of addition right to left matrix. | Improve this Doc View Source Equality(Matrix4x4<N>, N) Declaration public static bool operator ==(Matrix4x4<N> left, N right) Parameters Type Name Description Matrix4x4 <N> left N right Returns Type Description Boolean | Improve this Doc View Source Equality(Matrix4x4<N>, Matrix4x4<N>) Declaration public static bool operator ==(Matrix4x4<N> left, Matrix4x4<N> right) Parameters Type Name Description Matrix4x4 <N> left Matrix4x4 <N> right Returns Type Description Boolean | Improve this Doc View Source Inequality(Matrix4x4<N>, N) Declaration public static bool operator !=(Matrix4x4<N> left, N right) Parameters Type Name Description Matrix4x4 <N> left N right Returns Type Description Boolean | Improve this Doc View Source Inequality(Matrix4x4<N>, Matrix4x4<N>) Declaration public static bool operator !=(Matrix4x4<N> left, Matrix4x4<N> right) Parameters Type Name Description Matrix4x4 <N> left Matrix4x4 <N> right Returns Type Description Boolean | Improve this Doc View Source Multiply(Matrix4x4<N>, N) Multiply matrix by scalar. Declaration public static Matrix4x4<N> operator *(Matrix4x4<N> left, N right) Parameters Type Name Description Matrix4x4 <N> left The left argument. N right The right argument. Returns Type Description Matrix4x4 <N> Resulting matrix - result of multiplication of left matrix and right scalar. | Improve this Doc View Source Multiply(Matrix4x4<N>, Matrix4x4<N>) Multiply two matrices. Declaration public static Matrix4x4<N> operator *(Matrix4x4<N> left, Matrix4x4<N> right) Parameters Type Name Description Matrix4x4 <N> left The left argument. Matrix4x4 <N> right The right argument. Returns Type Description Matrix4x4 <N> Resulting matrix - result of multiplication of left and right matrices. | Improve this Doc View Source Multiply(Matrix4x4<N>, Vector4d<N>) Multiply two matrices. Declaration public static Vector4d<N> operator *(Matrix4x4<N> left, Vector4d<N> right) Parameters Type Name Description Matrix4x4 <N> left The left argument. Vector4d <N> right The right argument. Returns Type Description Vector4d <N> Resulting matrix - result of multiplication of left and right matrices. | Improve this Doc View Source Multiply(Vector4d<N>, Matrix4x4<N>) Multiply two matrices. Declaration public static Vector4d<N> operator *(Vector4d<N> left, Matrix4x4<N> right) Parameters Type Name Description Vector4d <N> left The left argument. Matrix4x4 <N> right The right argument. Returns Type Description Vector4d <N> Resulting matrix - result of multiplication of left and right matrices. | Improve this Doc View Source Subtraction(Matrix4x4<N>, N) Subtract scalar from matrix. Declaration public static Matrix4x4<N> operator -(Matrix4x4<N> left, N right) Parameters Type Name Description Matrix4x4 <N> left The left argument. N right The right argument. Returns Type Description Matrix4x4 <N> Resulting matrix - result of subtraction right scalar from left matrix. | Improve this Doc View Source Subtraction(Matrix4x4<N>, Matrix4x4<N>) Subtract one matrix from another one. Declaration public static Matrix4x4<N> operator -(Matrix4x4<N> left, Matrix4x4<N> right) Parameters Type Name Description Matrix4x4 <N> left The left argument. Matrix4x4 <N> right The right argument. Returns Type Description Matrix4x4 <N> Resulting matrix - result of subtraction right from left matrix. Implements System.Numerics.IAdditionOperators<TSelf,TOther,TResult> System.Numerics.ISubtractionOperators<TSelf,TOther,TResult> System.Numerics.IMultiplyOperators<TSelf,TOther,TResult> System.Numerics.IAdditionOperators<TSelf,TOther,TResult> System.Numerics.ISubtractionOperators<TSelf,TOther,TResult> System.Numerics.IMultiplyOperators<TSelf,TOther,TResult> System.Numerics.IEqualityOperators<TSelf,TOther,TResult> System.IEquatable<T>"
  },
  "api/NiTiS.Math.Scalar.html": {
    "href": "api/NiTiS.Math.Scalar.html",
    "title": "Class Scalar",
    "keywords": "Class Scalar Provides methods for scalar units. Inheritance Object Scalar Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Math Assembly : NiTiS.Math.dll Syntax public static class Scalar Methods | Improve this Doc View Source GreatestCommonDivisor(Int32, Int32) Resolves greatest divisor for a and b . Declaration public static int GreatestCommonDivisor(int a, int b) Parameters Type Name Description Int32 a The first argument. Int32 b The second argument. Returns Type Description Int32 Greatest common divisor. | Improve this Doc View Source GreatestCommonDivisor(Int64, Int64) Resolves greatest divisor for a and b . Declaration public static long GreatestCommonDivisor(long a, long b) Parameters Type Name Description Int64 a The first argument. Int64 b The second argument. Returns Type Description Int64 Greatest common divisor. | Improve this Doc View Source GreatestCommonDivisor<N>(N, N) Resolves greatest divisor for a and b . Declaration public static N GreatestCommonDivisor<N>(N a, N b) where N : INumberBase<N>, IComparisonOperators<N, N, bool>, IModulusOperators<N, N, N> Parameters Type Name Description N a The first argument. N b The second argument. Returns Type Description N Greatest common divisor. Type Parameters Name Description N | Improve this Doc View Source IsPrime(Int32) Cheks if number is prime. Prime is a positive natural number greater than 1 that is not a product of two smaller natural numbers. Declaration public static bool IsPrime(int number) Parameters Type Name Description Int32 number Returns Type Description Boolean true when number is prime. | Improve this Doc View Source IsPrime(Int64) Cheks if number is prime. Prime is a positive natural number greater than 1 that is not a product of two smaller natural numbers. Declaration public static bool IsPrime(long number) Parameters Type Name Description Int64 number Returns Type Description Boolean true when number is prime. | Improve this Doc View Source LeastCommonMultiple(Int32, Int32) Resolves leastest multiple for a and b . Declaration public static int LeastCommonMultiple(int a, int b) Parameters Type Name Description Int32 a The first argument. Int32 b The second argument. Returns Type Description Int32 Least common multiple. | Improve this Doc View Source LeastCommonMultiple(Int64, Int64) Resolves leastest multiple for a and b . Declaration public static long LeastCommonMultiple(long a, long b) Parameters Type Name Description Int64 a The first argument. Int64 b The second argument. Returns Type Description Int64 Least common multiple. | Improve this Doc View Source LeastCommonMultiple<N>(N, N) Resolves leastest multiple for a and b . Declaration public static N LeastCommonMultiple<N>(N a, N b) where N : INumberBase<N>, IComparisonOperators<N, N, bool>, IModulusOperators<N, N, N> Parameters Type Name Description N a The first argument. N b The second argument. Returns Type Description N Least common multiple. Type Parameters Name Description N | Improve this Doc View Source ToDegrees(Double) Convert radians to degrees Declaration public static double ToDegrees(double radians) Parameters Type Name Description Double radians Radians. Returns Type Description Double Degrees. | Improve this Doc View Source ToDegrees(Single) Convert radians to degrees Declaration public static float ToDegrees(float radians) Parameters Type Name Description Single radians Radians. Returns Type Description Single Degrees. | Improve this Doc View Source ToRadians(Double) Convert degrees to radians. Declaration public static double ToRadians(double degrees) Parameters Type Name Description Double degrees Degrees. Returns Type Description Double Radians. | Improve this Doc View Source ToRadians(Single) Convert degrees to radians. Declaration public static float ToRadians(float degrees) Parameters Type Name Description Single degrees Degrees. Returns Type Description Single Radians."
  },
  "api/NiTiS.Math.Vector2d.html": {
    "href": "api/NiTiS.Math.Vector2d.html",
    "title": "Class Vector2d",
    "keywords": "Class Vector2d Inheritance Object Vector2d Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Math Assembly : NiTiS.Math.dll Syntax public static class Vector2d Methods | Improve this Doc View Source Abs<T>(Vector2d<T>) Declaration public static Vector2d<T> Abs<T>(Vector2d<T> vec) where T : struct, INumberBase<T> Parameters Type Name Description Vector2d <T> vec Returns Type Description Vector2d <T> Type Parameters Name Description T | Improve this Doc View Source Add<N>(Vector2d<N>, N) Declaration public static Vector2d<N> Add<N>(Vector2d<N> left, N right) where N : struct, INumberBase<N> Parameters Type Name Description Vector2d <N> left N right Returns Type Description Vector2d <N> Type Parameters Name Description N | Improve this Doc View Source Add<N>(Vector2d<N>, Vector2d<N>) Declaration public static Vector2d<N> Add<N>(Vector2d<N> left, Vector2d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description Vector2d <N> left Vector2d <N> right Returns Type Description Vector2d <N> Type Parameters Name Description N | Improve this Doc View Source AngleBetween<F>(Vector2d<F>, Vector2d<F>) Declaration public static F AngleBetween<F>(Vector2d<F> left, Vector2d<F> right) where F : struct, INumberBase<F>, IRootFunctions<F>, ITrigonometricFunctions<F>, IComparisonOperators<F, F, bool> Parameters Type Name Description Vector2d <F> left Vector2d <F> right Returns Type Description F Type Parameters Name Description F | Improve this Doc View Source Bitwise<N>(Vector2d<N>) Declaration public static Vector2d<N> Bitwise<N>(Vector2d<N> operand) where N : struct, INumberBase<N>, IBitwiseOperators<N, N, N> Parameters Type Name Description Vector2d <N> operand Returns Type Description Vector2d <N> Type Parameters Name Description N | Improve this Doc View Source Clamp<N>(Vector2d<N>, Vector2d<N>, Vector2d<N>) Declaration public static Vector2d<N> Clamp<N>(Vector2d<N> value, Vector2d<N> min, Vector2d<N> max) where N : struct, INumberBase<N>, INumber<N> Parameters Type Name Description Vector2d <N> value Vector2d <N> min Vector2d <N> max Returns Type Description Vector2d <N> Type Parameters Name Description N | Improve this Doc View Source ConvertToGeneric(Vector2) Convert Vector2 to Vector2d<N> Declaration public static Vector2d<float> ConvertToGeneric(this Vector2 vector) Parameters Type Name Description Vector2 vector Origin non-generic vector Returns Type Description Vector2d < Single > The generic vector | Improve this Doc View Source ConvertToSystem(Vector2d<Single>) Convert Vector2d<N> to Vector2 Declaration public static Vector2 ConvertToSystem(this Vector2d<float> vector) Parameters Type Name Description Vector2d < Single > vector Origin generic vector Returns Type Description Vector2 The non-generic vector | Improve this Doc View Source Distance<N>(Vector2d<N>, Vector2d<N>) Declaration public static N Distance<N>(Vector2d<N> from, Vector2d<N> to) where N : struct, INumberBase<N>, IRootFunctions<N> Parameters Type Name Description Vector2d <N> from Vector2d <N> to Returns Type Description N Type Parameters Name Description N | Improve this Doc View Source DistanceSquared<N>(Vector2d<N>, Vector2d<N>) Declaration public static N DistanceSquared<N>(Vector2d<N> from, Vector2d<N> to) where N : struct, INumberBase<N> Parameters Type Name Description Vector2d <N> from Vector2d <N> to Returns Type Description N Type Parameters Name Description N | Improve this Doc View Source Divide<N>(N, Vector2d<N>) Declaration public static Vector2d<N> Divide<N>(N left, Vector2d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description N left Vector2d <N> right Returns Type Description Vector2d <N> Type Parameters Name Description N | Improve this Doc View Source Divide<N>(Vector2d<N>, N) Declaration public static Vector2d<N> Divide<N>(Vector2d<N> left, N right) where N : struct, INumberBase<N> Parameters Type Name Description Vector2d <N> left N right Returns Type Description Vector2d <N> Type Parameters Name Description N | Improve this Doc View Source Divide<N>(Vector2d<N>, Vector2d<N>) Declaration public static Vector2d<N> Divide<N>(Vector2d<N> left, Vector2d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description Vector2d <N> left Vector2d <N> right Returns Type Description Vector2d <N> Type Parameters Name Description N | Improve this Doc View Source Dot<N>(Vector2d<N>, N) Declaration public static N Dot<N>(Vector2d<N> left, N right) where N : struct, INumberBase<N> Parameters Type Name Description Vector2d <N> left N right Returns Type Description N Type Parameters Name Description N | Improve this Doc View Source Dot<N>(Vector2d<N>, Vector2d<N>) Declaration public static N Dot<N>(Vector2d<N> left, Vector2d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description Vector2d <N> left Vector2d <N> right Returns Type Description N Type Parameters Name Description N | Improve this Doc View Source Length<F>(Vector2d<F>) Declaration public static F Length<F>(Vector2d<F> operand) where F : struct, INumberBase<F>, IRootFunctions<F> Parameters Type Name Description Vector2d <F> operand Returns Type Description F Type Parameters Name Description F | Improve this Doc View Source Lerp<N>(Vector2d<N>, Vector2d<N>, N) Declaration public static Vector2d<N> Lerp<N>(Vector2d<N> left, Vector2d<N> right, N amount) where N : struct, INumberBase<N> Parameters Type Name Description Vector2d <N> left Vector2d <N> right N amount Returns Type Description Vector2d <N> Type Parameters Name Description N | Improve this Doc View Source Max<N>(Vector2d<N>, Vector2d<N>) Declaration public static Vector2d<N> Max<N>(Vector2d<N> left, Vector2d<N> right) where N : struct, INumber<N> Parameters Type Name Description Vector2d <N> left Vector2d <N> right Returns Type Description Vector2d <N> Type Parameters Name Description N | Improve this Doc View Source Min<N>(Vector2d<N>, Vector2d<N>) Declaration public static Vector2d<N> Min<N>(Vector2d<N> left, Vector2d<N> right) where N : struct, INumber<N> Parameters Type Name Description Vector2d <N> left Vector2d <N> right Returns Type Description Vector2d <N> Type Parameters Name Description N | Improve this Doc View Source Multiply<N>(N, Vector2d<N>) Declaration public static Vector2d<N> Multiply<N>(N left, Vector2d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description N left Vector2d <N> right Returns Type Description Vector2d <N> Type Parameters Name Description N | Improve this Doc View Source Multiply<N>(Vector2d<N>, N) Declaration public static Vector2d<N> Multiply<N>(Vector2d<N> left, N right) where N : struct, INumberBase<N> Parameters Type Name Description Vector2d <N> left N right Returns Type Description Vector2d <N> Type Parameters Name Description N | Improve this Doc View Source Multiply<N>(Vector2d<N>, Vector2d<N>) Declaration public static Vector2d<N> Multiply<N>(Vector2d<N> left, Vector2d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description Vector2d <N> left Vector2d <N> right Returns Type Description Vector2d <N> Type Parameters Name Description N | Improve this Doc View Source Negate<N>(Vector2d<N>) Declaration public static Vector2d<N> Negate<N>(Vector2d<N> operand) where N : struct, INumberBase<N> Parameters Type Name Description Vector2d <N> operand Returns Type Description Vector2d <N> Type Parameters Name Description N | Improve this Doc View Source Normalize<F>(Vector2d<F>) Declaration public static Vector2d<F> Normalize<F>(Vector2d<F> operand) where F : struct, INumberBase<F>, IRootFunctions<F> Parameters Type Name Description Vector2d <F> operand Returns Type Description Vector2d <F> Type Parameters Name Description F | Improve this Doc View Source Reflect<N>(Vector2d<N>, Vector2d<N>) Declaration public static Vector2d<N> Reflect<N>(Vector2d<N> vector, Vector2d<N> normal) where N : struct, INumberBase<N> Parameters Type Name Description Vector2d <N> vector Vector2d <N> normal Returns Type Description Vector2d <N> Type Parameters Name Description N | Improve this Doc View Source SquareRoot<F>(Vector2d<F>) Declaration public static Vector2d<F> SquareRoot<F>(Vector2d<F> operand) where F : struct, INumberBase<F>, IRootFunctions<F> Parameters Type Name Description Vector2d <F> operand Returns Type Description Vector2d <F> Type Parameters Name Description F | Improve this Doc View Source Substract<N>(Vector2d<N>, Vector2d<N>) Declaration public static Vector2d<N> Substract<N>(Vector2d<N> left, Vector2d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description Vector2d <N> left Vector2d <N> right Returns Type Description Vector2d <N> Type Parameters Name Description N | Improve this Doc View Source Sum<N>(Vector2d<N>) Calculate sum of the operand . Declaration public static N Sum<N>(Vector2d<N> operand) where N : struct, INumberBase<N> Parameters Type Name Description Vector2d <N> operand The sum operand. Returns Type Description N The sum of the vector coordinates. Type Parameters Name Description N"
  },
  "api/NiTiS.Math.Vector2d-1.html": {
    "href": "api/NiTiS.Math.Vector2d-1.html",
    "title": "Struct Vector2d<N>",
    "keywords": "Struct Vector2d<N> Two-dimension vector with direction and magnitude. Implements IAdditionOperators < Vector2d <N>, Vector2d <N>, Vector2d <N>> ISubtractionOperators < Vector2d <N>, Vector2d <N>, Vector2d <N>> IDivisionOperators < Vector2d <N>, Vector2d <N>, Vector2d <N>> IMultiplyOperators < Vector2d <N>, Vector2d <N>, Vector2d <N>> IEqualityOperators < Vector2d <N>, Vector2d <N>, Boolean > IAdditionOperators < Vector2d <N>, N, Vector2d <N>> ISubtractionOperators < Vector2d <N>, N, Vector2d <N>> IDivisionOperators < Vector2d <N>, N, Vector2d <N>> IMultiplyOperators < Vector2d <N>, N, Vector2d <N>> IUnaryNegationOperators < Vector2d <N>, Vector2d <N>> IUnaryPlusOperators < Vector2d <N>, Vector2d <N>> IFormattable IEquatable < Vector2d <N>> Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : NiTiS.Math Assembly : NiTiS.Math.dll Syntax public struct Vector2d<N> : IAdditionOperators<Vector2d<N>, Vector2d<N>, Vector2d<N>>, ISubtractionOperators<Vector2d<N>, Vector2d<N>, Vector2d<N>>, IDivisionOperators<Vector2d<N>, Vector2d<N>, Vector2d<N>>, IMultiplyOperators<Vector2d<N>, Vector2d<N>, Vector2d<N>>, IEqualityOperators<Vector2d<N>, Vector2d<N>, bool>, IAdditionOperators<Vector2d<N>, N, Vector2d<N>>, ISubtractionOperators<Vector2d<N>, N, Vector2d<N>>, IDivisionOperators<Vector2d<N>, N, Vector2d<N>>, IMultiplyOperators<Vector2d<N>, N, Vector2d<N>>, IUnaryNegationOperators<Vector2d<N>, Vector2d<N>>, IUnaryPlusOperators<Vector2d<N>, Vector2d<N>>, IFormattable, IEquatable<Vector2d<N>> where N : struct, INumberBase<N> Type Parameters Name Description N Vector type. Constructors | Improve this Doc View Source Vector2d(N) Creates new two-dimensional vector with values ( xy , xy ) . Declaration public Vector2d(N xy) Parameters Type Name Description N xy X and Y value of vector. | Improve this Doc View Source Vector2d(N, N) Creates new two-dimensional vector with values ( x , y ) . Declaration public Vector2d(N x, N y) Parameters Type Name Description N x X value of vector. N y Y value of vector. | Improve this Doc View Source Vector2d(ReadOnlySpan<N>) Creates vector by buffer. Declaration public Vector2d(ReadOnlySpan<N> data) Parameters Type Name Description ReadOnlySpan <N> data Buffer with vector data. Exceptions Type Condition ArgumentOutOfRangeException Length of data buffer not enough for creation. | Improve this Doc View Source Vector2d(ReadOnlySpan<Byte>) Creates vector by buffer. Declaration public Vector2d(ReadOnlySpan<byte> data) Parameters Type Name Description ReadOnlySpan < Byte > data Buffer with vector data. Exceptions Type Condition ArgumentOutOfRangeException Length of data buffer not enough for creation. Fields | Improve this Doc View Source ElementCount Declaration public const int ElementCount = 2 Field Value Type Description Int32 | Improve this Doc View Source X X value of vector, the first dimension. Declaration public N X Field Value Type Description N | Improve this Doc View Source Y Y value of vector, the second dimension. Declaration public N Y Field Value Type Description N Properties | Improve this Doc View Source LengthSquared Squared magnitude of vector. Declaration public readonly N LengthSquared { get; } Property Value Type Description N | Improve this Doc View Source One Vector with all ones, (1, 1) . Declaration public static readonly Vector2d<N> One { get; } Property Value Type Description Vector2d <N> | Improve this Doc View Source UnitX Vector which X is one, (1, 0) . Declaration public static readonly Vector2d<N> UnitX { get; } Property Value Type Description Vector2d <N> | Improve this Doc View Source UnitY Vector which Y is one, (0, 1) . Declaration public static readonly Vector2d<N> UnitY { get; } Property Value Type Description Vector2d <N> | Improve this Doc View Source Zero Vector with all zeros, (0, 0) . Declaration public static readonly Vector2d<N> Zero { get; } Property Value Type Description Vector2d <N> Methods | Improve this Doc View Source CopyTo(N[]) Declaration public readonly void CopyTo(N[] array) Parameters Type Name Description N[] array | Improve this Doc View Source CopyTo(N[], UInt32) Declaration public readonly void CopyTo(N[] array, uint offset) Parameters Type Name Description N[] array UInt32 offset | Improve this Doc View Source CopyTo(Span<N>, UInt32) Declaration public readonly void CopyTo(Span<N> array, uint offset) Parameters Type Name Description Span <N> array UInt32 offset | Improve this Doc View Source Equals(Vector2d<N>) Declaration public readonly bool Equals(Vector2d<N> other) Parameters Type Name Description Vector2d <N> other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override readonly string ToString() Returns Type Description String Overrides ValueType.ToString() | Improve this Doc View Source ToString(String) Declaration public readonly string ToString(string format) Parameters Type Name Description String format Returns Type Description String | Improve this Doc View Source ToString(String, IFormatProvider) Declaration public readonly string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description String format IFormatProvider formatProvider Returns Type Description String Operators | Improve this Doc View Source Addition(Vector2d<N>, N) Declaration public static Vector2d<N> operator +(Vector2d<N> left, N right) Parameters Type Name Description Vector2d <N> left N right Returns Type Description Vector2d <N> | Improve this Doc View Source Addition(Vector2d<N>, Vector2d<N>) Declaration public static Vector2d<N> operator +(Vector2d<N> left, Vector2d<N> right) Parameters Type Name Description Vector2d <N> left Vector2d <N> right Returns Type Description Vector2d <N> | Improve this Doc View Source Division(N, Vector2d<N>) Declaration public static Vector2d<N> operator /(N left, Vector2d<N> right) Parameters Type Name Description N left Vector2d <N> right Returns Type Description Vector2d <N> | Improve this Doc View Source Division(Vector2d<N>, N) Declaration public static Vector2d<N> operator /(Vector2d<N> left, N right) Parameters Type Name Description Vector2d <N> left N right Returns Type Description Vector2d <N> | Improve this Doc View Source Division(Vector2d<N>, Vector2d<N>) Declaration public static Vector2d<N> operator /(Vector2d<N> left, Vector2d<N> right) Parameters Type Name Description Vector2d <N> left Vector2d <N> right Returns Type Description Vector2d <N> | Improve this Doc View Source Equality(Vector2d<N>, Vector2d<N>) Declaration public static bool operator ==(Vector2d<N> left, Vector2d<N> right) Parameters Type Name Description Vector2d <N> left Vector2d <N> right Returns Type Description Boolean | Improve this Doc View Source Explicit(Vector2d<N> to Vector3d<N>) Declaration public static explicit operator Vector3d<N>(Vector2d<N> operand) Parameters Type Name Description Vector2d <N> operand Returns Type Description Vector3d <N> | Improve this Doc View Source Explicit(Vector2d<N> to Vector4d<N>) Declaration public static explicit operator Vector4d<N>(Vector2d<N> operand) Parameters Type Name Description Vector2d <N> operand Returns Type Description Vector4d <N> | Improve this Doc View Source Inequality(Vector2d<N>, Vector2d<N>) Declaration public static bool operator !=(Vector2d<N> left, Vector2d<N> right) Parameters Type Name Description Vector2d <N> left Vector2d <N> right Returns Type Description Boolean | Improve this Doc View Source Multiply(N, Vector2d<N>) Declaration public static Vector2d<N> operator *(N left, Vector2d<N> right) Parameters Type Name Description N left Vector2d <N> right Returns Type Description Vector2d <N> | Improve this Doc View Source Multiply(Vector2d<N>, N) Declaration public static Vector2d<N> operator *(Vector2d<N> left, N right) Parameters Type Name Description Vector2d <N> left N right Returns Type Description Vector2d <N> | Improve this Doc View Source Multiply(Vector2d<N>, Vector2d<N>) Declaration public static Vector2d<N> operator *(Vector2d<N> left, Vector2d<N> right) Parameters Type Name Description Vector2d <N> left Vector2d <N> right Returns Type Description Vector2d <N> | Improve this Doc View Source Subtraction(Vector2d<N>, N) Declaration public static Vector2d<N> operator -(Vector2d<N> left, N right) Parameters Type Name Description Vector2d <N> left N right Returns Type Description Vector2d <N> | Improve this Doc View Source Subtraction(Vector2d<N>, Vector2d<N>) Declaration public static Vector2d<N> operator -(Vector2d<N> left, Vector2d<N> right) Parameters Type Name Description Vector2d <N> left Vector2d <N> right Returns Type Description Vector2d <N> | Improve this Doc View Source UnaryNegation(Vector2d<N>) Declaration public static Vector2d<N> operator -(Vector2d<N> operand) Parameters Type Name Description Vector2d <N> operand Returns Type Description Vector2d <N> | Improve this Doc View Source UnaryPlus(Vector2d<N>) Declaration public static Vector2d<N> operator +(Vector2d<N> operand) Parameters Type Name Description Vector2d <N> operand Returns Type Description Vector2d <N> Implements System.Numerics.IAdditionOperators<TSelf,TOther,TResult> System.Numerics.ISubtractionOperators<TSelf,TOther,TResult> System.Numerics.IDivisionOperators<TSelf,TOther,TResult> System.Numerics.IMultiplyOperators<TSelf,TOther,TResult> System.Numerics.IEqualityOperators<TSelf,TOther,TResult> System.Numerics.IAdditionOperators<TSelf,TOther,TResult> System.Numerics.ISubtractionOperators<TSelf,TOther,TResult> System.Numerics.IDivisionOperators<TSelf,TOther,TResult> System.Numerics.IMultiplyOperators<TSelf,TOther,TResult> System.Numerics.IUnaryNegationOperators<TSelf,TResult> System.Numerics.IUnaryPlusOperators<TSelf,TResult> System.IFormattable System.IEquatable<T>"
  },
  "api/NiTiS.Math.Vector3d.html": {
    "href": "api/NiTiS.Math.Vector3d.html",
    "title": "Class Vector3d",
    "keywords": "Class Vector3d Inheritance Object Vector3d Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Math Assembly : NiTiS.Math.dll Syntax public static class Vector3d Methods | Improve this Doc View Source Abs<T>(Vector3d<T>) Declaration public static Vector3d<T> Abs<T>(Vector3d<T> vec) where T : struct, INumberBase<T> Parameters Type Name Description Vector3d <T> vec Returns Type Description Vector3d <T> Type Parameters Name Description T | Improve this Doc View Source Add<N>(Vector3d<N>, N) Declaration public static Vector3d<N> Add<N>(Vector3d<N> left, N right) where N : struct, INumberBase<N> Parameters Type Name Description Vector3d <N> left N right Returns Type Description Vector3d <N> Type Parameters Name Description N | Improve this Doc View Source Add<N>(Vector3d<N>, Vector3d<N>) Declaration public static Vector3d<N> Add<N>(Vector3d<N> left, Vector3d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description Vector3d <N> left Vector3d <N> right Returns Type Description Vector3d <N> Type Parameters Name Description N | Improve this Doc View Source AngleBetween<F>(Vector3d<F>, Vector3d<F>) Declaration public static F AngleBetween<F>(Vector3d<F> left, Vector3d<F> right) where F : struct, INumberBase<F>, IRootFunctions<F>, ITrigonometricFunctions<F>, IComparisonOperators<F, F, bool> Parameters Type Name Description Vector3d <F> left Vector3d <F> right Returns Type Description F Type Parameters Name Description F | Improve this Doc View Source Bitwise<N>(Vector3d<N>) Declaration public static Vector3d<N> Bitwise<N>(Vector3d<N> operand) where N : struct, INumberBase<N>, IBitwiseOperators<N, N, N> Parameters Type Name Description Vector3d <N> operand Returns Type Description Vector3d <N> Type Parameters Name Description N | Improve this Doc View Source Clamp<N>(Vector3d<N>, Vector3d<N>, Vector3d<N>) Declaration public static Vector3d<N> Clamp<N>(Vector3d<N> value, Vector3d<N> min, Vector3d<N> max) where N : struct, INumber<N> Parameters Type Name Description Vector3d <N> value Vector3d <N> min Vector3d <N> max Returns Type Description Vector3d <N> Type Parameters Name Description N | Improve this Doc View Source ConvertToGeneric(Vector3) Convert Vector3 to Vector3d<N> Declaration public static Vector3d<float> ConvertToGeneric(this Vector3 vector) Parameters Type Name Description Vector3 vector Origin non-generic vector Returns Type Description Vector3d < Single > The generic vector | Improve this Doc View Source ConvertToSystem(Vector3d<Single>) Convert Vector3d<N> to Vector3 Declaration public static Vector3 ConvertToSystem(this Vector3d<float> vector) Parameters Type Name Description Vector3d < Single > vector Origin generic vector Returns Type Description Vector3 The non-generic vector | Improve this Doc View Source Cross<N>(Vector3d<N>, Vector3d<N>) Declaration public static Vector3d<N> Cross<N>(Vector3d<N> left, Vector3d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description Vector3d <N> left Vector3d <N> right Returns Type Description Vector3d <N> Type Parameters Name Description N | Improve this Doc View Source Distance<F>(Vector3d<F>, Vector3d<F>) Declaration public static F Distance<F>(Vector3d<F> from, Vector3d<F> to) where F : struct, INumberBase<F>, IRootFunctions<F> Parameters Type Name Description Vector3d <F> from Vector3d <F> to Returns Type Description F Type Parameters Name Description F | Improve this Doc View Source DistanceSquared<N>(Vector3d<N>, Vector3d<N>) Declaration public static N DistanceSquared<N>(Vector3d<N> from, Vector3d<N> to) where N : struct, INumberBase<N> Parameters Type Name Description Vector3d <N> from Vector3d <N> to Returns Type Description N Type Parameters Name Description N | Improve this Doc View Source Divide<N>(N, Vector3d<N>) Declaration public static Vector3d<N> Divide<N>(N left, Vector3d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description N left Vector3d <N> right Returns Type Description Vector3d <N> Type Parameters Name Description N | Improve this Doc View Source Divide<N>(Vector3d<N>, N) Declaration public static Vector3d<N> Divide<N>(Vector3d<N> left, N right) where N : struct, INumberBase<N> Parameters Type Name Description Vector3d <N> left N right Returns Type Description Vector3d <N> Type Parameters Name Description N | Improve this Doc View Source Divide<N>(Vector3d<N>, Vector3d<N>) Declaration public static Vector3d<N> Divide<N>(Vector3d<N> left, Vector3d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description Vector3d <N> left Vector3d <N> right Returns Type Description Vector3d <N> Type Parameters Name Description N | Improve this Doc View Source Dot<N>(Vector3d<N>, N) Declaration public static N Dot<N>(Vector3d<N> left, N right) where N : struct, INumberBase<N> Parameters Type Name Description Vector3d <N> left N right Returns Type Description N Type Parameters Name Description N | Improve this Doc View Source Dot<N>(Vector3d<N>, Vector3d<N>) Declaration public static N Dot<N>(Vector3d<N> left, Vector3d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description Vector3d <N> left Vector3d <N> right Returns Type Description N Type Parameters Name Description N | Improve this Doc View Source Length<F>(Vector3d<F>) Declaration public static F Length<F>(Vector3d<F> operand) where F : struct, INumberBase<F>, IRootFunctions<F> Parameters Type Name Description Vector3d <F> operand Returns Type Description F Type Parameters Name Description F | Improve this Doc View Source Lerp<N>(Vector3d<N>, Vector3d<N>, N) Declaration public static Vector3d<N> Lerp<N>(Vector3d<N> left, Vector3d<N> right, N amount) where N : struct, INumberBase<N> Parameters Type Name Description Vector3d <N> left Vector3d <N> right N amount Returns Type Description Vector3d <N> Type Parameters Name Description N | Improve this Doc View Source Max<N>(Vector3d<N>, Vector3d<N>) Declaration public static Vector3d<N> Max<N>(Vector3d<N> left, Vector3d<N> right) where N : struct, INumber<N> Parameters Type Name Description Vector3d <N> left Vector3d <N> right Returns Type Description Vector3d <N> Type Parameters Name Description N | Improve this Doc View Source Min<N>(Vector3d<N>, Vector3d<N>) Declaration public static Vector3d<N> Min<N>(Vector3d<N> left, Vector3d<N> right) where N : struct, INumber<N> Parameters Type Name Description Vector3d <N> left Vector3d <N> right Returns Type Description Vector3d <N> Type Parameters Name Description N | Improve this Doc View Source Multiply<N>(N, Vector3d<N>) Declaration public static Vector3d<N> Multiply<N>(N left, Vector3d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description N left Vector3d <N> right Returns Type Description Vector3d <N> Type Parameters Name Description N | Improve this Doc View Source Multiply<N>(Vector3d<N>, N) Declaration public static Vector3d<N> Multiply<N>(Vector3d<N> left, N right) where N : struct, INumberBase<N> Parameters Type Name Description Vector3d <N> left N right Returns Type Description Vector3d <N> Type Parameters Name Description N | Improve this Doc View Source Multiply<N>(Vector3d<N>, Vector3d<N>) Declaration public static Vector3d<N> Multiply<N>(Vector3d<N> left, Vector3d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description Vector3d <N> left Vector3d <N> right Returns Type Description Vector3d <N> Type Parameters Name Description N | Improve this Doc View Source Negate<N>(Vector3d<N>) Declaration public static Vector3d<N> Negate<N>(Vector3d<N> operand) where N : struct, INumberBase<N> Parameters Type Name Description Vector3d <N> operand Returns Type Description Vector3d <N> Type Parameters Name Description N | Improve this Doc View Source Normalize<N>(Vector3d<N>) Declaration public static Vector3d<N> Normalize<N>(Vector3d<N> operand) where N : struct, INumberBase<N>, IRootFunctions<N> Parameters Type Name Description Vector3d <N> operand Returns Type Description Vector3d <N> Type Parameters Name Description N | Improve this Doc View Source Reflect<N>(Vector3d<N>, Vector3d<N>) Declaration public static Vector3d<N> Reflect<N>(Vector3d<N> vector, Vector3d<N> normal) where N : struct, INumberBase<N> Parameters Type Name Description Vector3d <N> vector Vector3d <N> normal Returns Type Description Vector3d <N> Type Parameters Name Description N | Improve this Doc View Source SquareRoot<F>(Vector3d<F>) Declaration public static Vector3d<F> SquareRoot<F>(Vector3d<F> operand) where F : struct, INumberBase<F>, IRootFunctions<F> Parameters Type Name Description Vector3d <F> operand Returns Type Description Vector3d <F> Type Parameters Name Description F | Improve this Doc View Source Substract<N>(Vector3d<N>, Vector3d<N>) Declaration public static Vector3d<N> Substract<N>(Vector3d<N> left, Vector3d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description Vector3d <N> left Vector3d <N> right Returns Type Description Vector3d <N> Type Parameters Name Description N | Improve this Doc View Source Sum<N>(Vector3d<N>) Calculate sum of the operand Declaration public static N Sum<N>(Vector3d<N> operand) where N : struct, INumberBase<N> Parameters Type Name Description Vector3d <N> operand The sum operand Returns Type Description N The sum of the vector coordinates Type Parameters Name Description N"
  },
  "api/NiTiS.Math.Vector3d-1.html": {
    "href": "api/NiTiS.Math.Vector3d-1.html",
    "title": "Struct Vector3d<N>",
    "keywords": "Struct Vector3d<N> Third-dimension vector with direction and magnitude. Implements IAdditionOperators < Vector3d <N>, Vector3d <N>, Vector3d <N>> ISubtractionOperators < Vector3d <N>, Vector3d <N>, Vector3d <N>> IDivisionOperators < Vector3d <N>, Vector3d <N>, Vector3d <N>> IMultiplyOperators < Vector3d <N>, Vector3d <N>, Vector3d <N>> IEqualityOperators < Vector3d <N>, Vector3d <N>, Boolean > IAdditionOperators < Vector3d <N>, N, Vector3d <N>> ISubtractionOperators < Vector3d <N>, N, Vector3d <N>> IDivisionOperators < Vector3d <N>, N, Vector3d <N>> IMultiplyOperators < Vector3d <N>, N, Vector3d <N>> IUnaryNegationOperators < Vector3d <N>, Vector3d <N>> IUnaryPlusOperators < Vector3d <N>, Vector3d <N>> IFormattable IEquatable < Vector3d <N>> Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : NiTiS.Math Assembly : NiTiS.Math.dll Syntax public struct Vector3d<N> : IAdditionOperators<Vector3d<N>, Vector3d<N>, Vector3d<N>>, ISubtractionOperators<Vector3d<N>, Vector3d<N>, Vector3d<N>>, IDivisionOperators<Vector3d<N>, Vector3d<N>, Vector3d<N>>, IMultiplyOperators<Vector3d<N>, Vector3d<N>, Vector3d<N>>, IEqualityOperators<Vector3d<N>, Vector3d<N>, bool>, IAdditionOperators<Vector3d<N>, N, Vector3d<N>>, ISubtractionOperators<Vector3d<N>, N, Vector3d<N>>, IDivisionOperators<Vector3d<N>, N, Vector3d<N>>, IMultiplyOperators<Vector3d<N>, N, Vector3d<N>>, IUnaryNegationOperators<Vector3d<N>, Vector3d<N>>, IUnaryPlusOperators<Vector3d<N>, Vector3d<N>>, IFormattable, IEquatable<Vector3d<N>> where N : struct, INumberBase<N> Type Parameters Name Description N Constructors | Improve this Doc View Source Vector3d(N) Creates new third-dimensional vector with values ( xyz , xyz , xyz ) . Declaration public Vector3d(N xyz) Parameters Type Name Description N xyz X, Y and Z value of vector. | Improve this Doc View Source Vector3d(N, N, N) Creates new third-dimensional vector with values ( x , y , z ) . Declaration public Vector3d(N x, N y, N z) Parameters Type Name Description N x X value of vector. N y Y value of vector. N z Z value of vector. | Improve this Doc View Source Vector3d(Vector2d<N>, N) Expands two-dimension vector to third-dimension. Declaration public Vector3d(Vector2d<N> base2, N z) Parameters Type Name Description Vector2d <N> base2 Base vector. N z Z value. | Improve this Doc View Source Vector3d(ReadOnlySpan<N>) Creates vector by buffer. Declaration public Vector3d(ReadOnlySpan<N> data) Parameters Type Name Description ReadOnlySpan <N> data Buffer with vector data. Exceptions Type Condition ArgumentOutOfRangeException Length of data buffer not enough for creation. | Improve this Doc View Source Vector3d(ReadOnlySpan<Byte>) Creates vector by buffer. Declaration public Vector3d(ReadOnlySpan<byte> data) Parameters Type Name Description ReadOnlySpan < Byte > data Buffer with vector data. Exceptions Type Condition ArgumentOutOfRangeException Length of data buffer not enough for creation. Fields | Improve this Doc View Source ElementCount Declaration public const int ElementCount = 3 Field Value Type Description Int32 | Improve this Doc View Source X X value of vector, the first dimension. Declaration public N X Field Value Type Description N | Improve this Doc View Source Y Y value of vector, the second dimension. Declaration public N Y Field Value Type Description N | Improve this Doc View Source Z Z value of vector, the third dimension. Declaration public N Z Field Value Type Description N Properties | Improve this Doc View Source LengthSquared Squared magnitude of vector. Declaration public readonly N LengthSquared { get; } Property Value Type Description N | Improve this Doc View Source One Vector with all ones, (1, 1, 1) . Declaration public static readonly Vector3d<N> One { get; } Property Value Type Description Vector3d <N> | Improve this Doc View Source UnitX Vector which X is one, (1, 0, 0) . Declaration public static readonly Vector3d<N> UnitX { get; } Property Value Type Description Vector3d <N> | Improve this Doc View Source UnitY Vector which Y is one, (0, 1, 0) . Declaration public static readonly Vector3d<N> UnitY { get; } Property Value Type Description Vector3d <N> | Improve this Doc View Source UnitZ Vector which Z is one, (0, 0, 1) . Declaration public static readonly Vector3d<N> UnitZ { get; } Property Value Type Description Vector3d <N> | Improve this Doc View Source Zero Vector with all zeros, (0, 0, 0) . Declaration public static readonly Vector3d<N> Zero { get; } Property Value Type Description Vector3d <N> Methods | Improve this Doc View Source CopyTo(N[]) Declaration public readonly void CopyTo(N[] array) Parameters Type Name Description N[] array | Improve this Doc View Source CopyTo(N[], UInt32) Declaration public readonly void CopyTo(N[] array, uint offset) Parameters Type Name Description N[] array UInt32 offset | Improve this Doc View Source CopyTo(Span<N>, UInt32) Declaration public readonly void CopyTo(Span<N> array, uint offset) Parameters Type Name Description Span <N> array UInt32 offset | Improve this Doc View Source Equals(Vector3d<N>) Declaration public readonly bool Equals(Vector3d<N> other) Parameters Type Name Description Vector3d <N> other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override readonly string ToString() Returns Type Description String Overrides ValueType.ToString() | Improve this Doc View Source ToString(String) Declaration public readonly string ToString(string format) Parameters Type Name Description String format Returns Type Description String | Improve this Doc View Source ToString(String, IFormatProvider) Declaration public readonly string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description String format IFormatProvider formatProvider Returns Type Description String Operators | Improve this Doc View Source Addition(Vector3d<N>, N) Declaration public static Vector3d<N> operator +(Vector3d<N> left, N right) Parameters Type Name Description Vector3d <N> left N right Returns Type Description Vector3d <N> | Improve this Doc View Source Addition(Vector3d<N>, Vector3d<N>) Declaration public static Vector3d<N> operator +(Vector3d<N> left, Vector3d<N> right) Parameters Type Name Description Vector3d <N> left Vector3d <N> right Returns Type Description Vector3d <N> | Improve this Doc View Source Division(N, Vector3d<N>) Declaration public static Vector3d<N> operator /(N left, Vector3d<N> right) Parameters Type Name Description N left Vector3d <N> right Returns Type Description Vector3d <N> | Improve this Doc View Source Division(Vector3d<N>, N) Declaration public static Vector3d<N> operator /(Vector3d<N> left, N right) Parameters Type Name Description Vector3d <N> left N right Returns Type Description Vector3d <N> | Improve this Doc View Source Division(Vector3d<N>, Vector3d<N>) Declaration public static Vector3d<N> operator /(Vector3d<N> left, Vector3d<N> right) Parameters Type Name Description Vector3d <N> left Vector3d <N> right Returns Type Description Vector3d <N> | Improve this Doc View Source Equality(Vector3d<N>, Vector3d<N>) Declaration public static bool operator ==(Vector3d<N> left, Vector3d<N> right) Parameters Type Name Description Vector3d <N> left Vector3d <N> right Returns Type Description Boolean | Improve this Doc View Source Explicit(Vector3d<N> to Vector4d<N>) Declaration public static explicit operator Vector4d<N>(Vector3d<N> operand) Parameters Type Name Description Vector3d <N> operand Returns Type Description Vector4d <N> | Improve this Doc View Source Implicit(Vector3d<N> to Vector2d<N>) Declaration public static implicit operator Vector2d<N>(Vector3d<N> operand) Parameters Type Name Description Vector3d <N> operand Returns Type Description Vector2d <N> | Improve this Doc View Source Inequality(Vector3d<N>, Vector3d<N>) Declaration public static bool operator !=(Vector3d<N> left, Vector3d<N> right) Parameters Type Name Description Vector3d <N> left Vector3d <N> right Returns Type Description Boolean | Improve this Doc View Source Multiply(N, Vector3d<N>) Declaration public static Vector3d<N> operator *(N left, Vector3d<N> right) Parameters Type Name Description N left Vector3d <N> right Returns Type Description Vector3d <N> | Improve this Doc View Source Multiply(Vector3d<N>, N) Declaration public static Vector3d<N> operator *(Vector3d<N> left, N right) Parameters Type Name Description Vector3d <N> left N right Returns Type Description Vector3d <N> | Improve this Doc View Source Multiply(Vector3d<N>, Vector3d<N>) Declaration public static Vector3d<N> operator *(Vector3d<N> left, Vector3d<N> right) Parameters Type Name Description Vector3d <N> left Vector3d <N> right Returns Type Description Vector3d <N> | Improve this Doc View Source Subtraction(Vector3d<N>, N) Declaration public static Vector3d<N> operator -(Vector3d<N> left, N right) Parameters Type Name Description Vector3d <N> left N right Returns Type Description Vector3d <N> | Improve this Doc View Source Subtraction(Vector3d<N>, Vector3d<N>) Declaration public static Vector3d<N> operator -(Vector3d<N> left, Vector3d<N> right) Parameters Type Name Description Vector3d <N> left Vector3d <N> right Returns Type Description Vector3d <N> | Improve this Doc View Source UnaryNegation(Vector3d<N>) Declaration public static Vector3d<N> operator -(Vector3d<N> operand) Parameters Type Name Description Vector3d <N> operand Returns Type Description Vector3d <N> | Improve this Doc View Source UnaryPlus(Vector3d<N>) Declaration public static Vector3d<N> operator +(Vector3d<N> operand) Parameters Type Name Description Vector3d <N> operand Returns Type Description Vector3d <N> Implements System.Numerics.IAdditionOperators<TSelf,TOther,TResult> System.Numerics.ISubtractionOperators<TSelf,TOther,TResult> System.Numerics.IDivisionOperators<TSelf,TOther,TResult> System.Numerics.IMultiplyOperators<TSelf,TOther,TResult> System.Numerics.IEqualityOperators<TSelf,TOther,TResult> System.Numerics.IAdditionOperators<TSelf,TOther,TResult> System.Numerics.ISubtractionOperators<TSelf,TOther,TResult> System.Numerics.IDivisionOperators<TSelf,TOther,TResult> System.Numerics.IMultiplyOperators<TSelf,TOther,TResult> System.Numerics.IUnaryNegationOperators<TSelf,TResult> System.Numerics.IUnaryPlusOperators<TSelf,TResult> System.IFormattable System.IEquatable<T>"
  },
  "api/NiTiS.Math.Vector4d.html": {
    "href": "api/NiTiS.Math.Vector4d.html",
    "title": "Class Vector4d",
    "keywords": "Class Vector4d Inheritance Object Vector4d Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NiTiS.Math Assembly : NiTiS.Math.dll Syntax public static class Vector4d Methods | Improve this Doc View Source Abs<N>(Vector4d<N>) Declaration public static Vector4d<N> Abs<N>(Vector4d<N> vec) where N : struct, INumberBase<N> Parameters Type Name Description Vector4d <N> vec Returns Type Description Vector4d <N> Type Parameters Name Description N | Improve this Doc View Source Add<N>(Vector4d<N>, N) Declaration public static Vector4d<N> Add<N>(Vector4d<N> left, N right) where N : struct, INumberBase<N> Parameters Type Name Description Vector4d <N> left N right Returns Type Description Vector4d <N> Type Parameters Name Description N | Improve this Doc View Source Add<N>(Vector4d<N>, Vector4d<N>) Declaration public static Vector4d<N> Add<N>(Vector4d<N> left, Vector4d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description Vector4d <N> left Vector4d <N> right Returns Type Description Vector4d <N> Type Parameters Name Description N | Improve this Doc View Source AngleBetween<F>(Vector4d<F>, Vector4d<F>) Declaration public static F AngleBetween<F>(Vector4d<F> left, Vector4d<F> right) where F : struct, INumberBase<F>, IRootFunctions<F>, ITrigonometricFunctions<F>, IComparisonOperators<F, F, bool> Parameters Type Name Description Vector4d <F> left Vector4d <F> right Returns Type Description F Type Parameters Name Description F | Improve this Doc View Source Bitwise<N>(Vector4d<N>) Declaration public static Vector4d<N> Bitwise<N>(Vector4d<N> operand) where N : struct, INumberBase<N>, IBitwiseOperators<N, N, N> Parameters Type Name Description Vector4d <N> operand Returns Type Description Vector4d <N> Type Parameters Name Description N | Improve this Doc View Source Clamp<N>(Vector4d<N>, Vector4d<N>, Vector4d<N>) Declaration public static Vector4d<N> Clamp<N>(Vector4d<N> value, Vector4d<N> min, Vector4d<N> max) where N : struct, INumberBase<N>, INumber<N> Parameters Type Name Description Vector4d <N> value Vector4d <N> min Vector4d <N> max Returns Type Description Vector4d <N> Type Parameters Name Description N | Improve this Doc View Source ConvertFromSystem<FROM, TO>(Vector128<FROM>) Declaration public static Vector4d<TO> ConvertFromSystem<FROM, TO>(this Vector128<FROM> vector) where FROM : struct where TO : struct, INumberBase<TO> Parameters Type Name Description Vector128 <FROM> vector Returns Type Description Vector4d <TO> Type Parameters Name Description FROM TO | Improve this Doc View Source ConvertFromSystem<FROM, TO>(Vector256<FROM>) Declaration public static Vector4d<TO> ConvertFromSystem<FROM, TO>(this Vector256<FROM> vector) where FROM : struct where TO : struct, INumberBase<TO> Parameters Type Name Description Vector256 <FROM> vector Returns Type Description Vector4d <TO> Type Parameters Name Description FROM TO | Improve this Doc View Source ConvertToGeneric(Vector4) Convert Vector4 to Vector4d<N> Declaration public static Vector4d<float> ConvertToGeneric(this Vector4 vector) Parameters Type Name Description Vector4 vector Origin non-generic vector Returns Type Description Vector4d < Single > The generic vector | Improve this Doc View Source ConvertToSystem(Vector4d<Single>) Convert Vector4d<N> to Vector4 Declaration public static Vector4 ConvertToSystem(this Vector4d<float> vector) Parameters Type Name Description Vector4d < Single > vector Origin generic vector Returns Type Description Vector4 The non-generic vector | Improve this Doc View Source ConvertToVec128<FROM, TO>(Vector4d<FROM>) Declaration public static Vector128<TO> ConvertToVec128<FROM, TO>(this Vector4d<FROM> vector) where FROM : struct, INumberBase<FROM> where TO : struct Parameters Type Name Description Vector4d <FROM> vector Returns Type Description Vector128 <TO> Type Parameters Name Description FROM TO | Improve this Doc View Source ConvertToVec256<FROM, TO>(Vector4d<FROM>) Declaration public static Vector256<TO> ConvertToVec256<FROM, TO>(this Vector4d<FROM> vector) where FROM : struct, INumberBase<FROM> where TO : struct Parameters Type Name Description Vector4d <FROM> vector Returns Type Description Vector256 <TO> Type Parameters Name Description FROM TO | Improve this Doc View Source Distance<F>(Vector4d<F>, Vector4d<F>) Declaration public static F Distance<F>(Vector4d<F> from, Vector4d<F> to) where F : struct, INumberBase<F>, IRootFunctions<F> Parameters Type Name Description Vector4d <F> from Vector4d <F> to Returns Type Description F Type Parameters Name Description F | Improve this Doc View Source DistanceSquared<N>(Vector4d<N>, Vector4d<N>) Declaration public static N DistanceSquared<N>(Vector4d<N> from, Vector4d<N> to) where N : struct, INumberBase<N> Parameters Type Name Description Vector4d <N> from Vector4d <N> to Returns Type Description N Type Parameters Name Description N | Improve this Doc View Source Divide<N>(N, Vector4d<N>) Declaration public static Vector4d<N> Divide<N>(N left, Vector4d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description N left Vector4d <N> right Returns Type Description Vector4d <N> Type Parameters Name Description N | Improve this Doc View Source Divide<N>(Vector4d<N>, N) Declaration public static Vector4d<N> Divide<N>(Vector4d<N> left, N right) where N : struct, INumberBase<N> Parameters Type Name Description Vector4d <N> left N right Returns Type Description Vector4d <N> Type Parameters Name Description N | Improve this Doc View Source Divide<N>(Vector4d<N>, Vector4d<N>) Declaration public static Vector4d<N> Divide<N>(Vector4d<N> left, Vector4d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description Vector4d <N> left Vector4d <N> right Returns Type Description Vector4d <N> Type Parameters Name Description N | Improve this Doc View Source Dot<N>(Vector4d<N>, N) Declaration public static N Dot<N>(Vector4d<N> left, N right) where N : struct, INumberBase<N> Parameters Type Name Description Vector4d <N> left N right Returns Type Description N Type Parameters Name Description N | Improve this Doc View Source Dot<N>(Vector4d<N>, Vector4d<N>) Declaration public static N Dot<N>(Vector4d<N> left, Vector4d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description Vector4d <N> left Vector4d <N> right Returns Type Description N Type Parameters Name Description N | Improve this Doc View Source Length<F>(Vector4d<F>) Declaration public static F Length<F>(Vector4d<F> operand) where F : struct, INumberBase<F>, IRootFunctions<F> Parameters Type Name Description Vector4d <F> operand Returns Type Description F Type Parameters Name Description F | Improve this Doc View Source Lerp<N>(Vector3d<N>, Vector3d<N>, N) Declaration public static Vector3d<N> Lerp<N>(Vector3d<N> left, Vector3d<N> right, N amount) where N : struct, INumberBase<N> Parameters Type Name Description Vector3d <N> left Vector3d <N> right N amount Returns Type Description Vector3d <N> Type Parameters Name Description N | Improve this Doc View Source Max<N>(Vector4d<N>, Vector4d<N>) Declaration public static Vector4d<N> Max<N>(Vector4d<N> left, Vector4d<N> right) where N : struct, INumber<N> Parameters Type Name Description Vector4d <N> left Vector4d <N> right Returns Type Description Vector4d <N> Type Parameters Name Description N | Improve this Doc View Source Min<N>(Vector4d<N>, Vector4d<N>) Declaration public static Vector4d<N> Min<N>(Vector4d<N> left, Vector4d<N> right) where N : struct, INumber<N> Parameters Type Name Description Vector4d <N> left Vector4d <N> right Returns Type Description Vector4d <N> Type Parameters Name Description N | Improve this Doc View Source Multiply<N>(N, Vector4d<N>) Declaration public static Vector4d<N> Multiply<N>(N left, Vector4d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description N left Vector4d <N> right Returns Type Description Vector4d <N> Type Parameters Name Description N | Improve this Doc View Source Multiply<N>(Vector4d<N>, N) Declaration public static Vector4d<N> Multiply<N>(Vector4d<N> left, N right) where N : struct, INumberBase<N> Parameters Type Name Description Vector4d <N> left N right Returns Type Description Vector4d <N> Type Parameters Name Description N | Improve this Doc View Source Multiply<N>(Vector4d<N>, Vector4d<N>) Declaration public static Vector4d<N> Multiply<N>(Vector4d<N> left, Vector4d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description Vector4d <N> left Vector4d <N> right Returns Type Description Vector4d <N> Type Parameters Name Description N | Improve this Doc View Source Negate<N>(Vector4d<N>) Declaration public static Vector4d<N> Negate<N>(Vector4d<N> operand) where N : struct, INumberBase<N> Parameters Type Name Description Vector4d <N> operand Returns Type Description Vector4d <N> Type Parameters Name Description N | Improve this Doc View Source Normalize<F>(Vector4d<F>) Declaration public static Vector4d<F> Normalize<F>(Vector4d<F> operand) where F : struct, INumberBase<F>, IRootFunctions<F> Parameters Type Name Description Vector4d <F> operand Returns Type Description Vector4d <F> Type Parameters Name Description F | Improve this Doc View Source Reflect<N>(Vector4d<N>, Vector4d<N>) Declaration public static Vector4d<N> Reflect<N>(Vector4d<N> vector, Vector4d<N> normal) where N : struct, INumberBase<N> Parameters Type Name Description Vector4d <N> vector Vector4d <N> normal Returns Type Description Vector4d <N> Type Parameters Name Description N | Improve this Doc View Source SquareRoot<F>(Vector4d<F>) Declaration public static Vector4d<F> SquareRoot<F>(Vector4d<F> operand) where F : struct, INumberBase<F>, IRootFunctions<F> Parameters Type Name Description Vector4d <F> operand Returns Type Description Vector4d <F> Type Parameters Name Description F | Improve this Doc View Source Substract<N>(Vector4d<N>, Vector4d<N>) Declaration public static Vector4d<N> Substract<N>(Vector4d<N> left, Vector4d<N> right) where N : struct, INumberBase<N> Parameters Type Name Description Vector4d <N> left Vector4d <N> right Returns Type Description Vector4d <N> Type Parameters Name Description N | Improve this Doc View Source Sum<N>(Vector4d<N>) Calculate sum of the operand Declaration public static N Sum<N>(Vector4d<N> operand) where N : struct, INumberBase<N> Parameters Type Name Description Vector4d <N> operand The sum operand Returns Type Description N The sum of the vector coordinates Type Parameters Name Description N"
  },
  "api/NiTiS.Math.Vector4d-1.html": {
    "href": "api/NiTiS.Math.Vector4d-1.html",
    "title": "Struct Vector4d<N>",
    "keywords": "Struct Vector4d<N> Fourth-dimension vector with direction and magnitude. Implements IAdditionOperators < Vector4d <N>, Vector4d <N>, Vector4d <N>> ISubtractionOperators < Vector4d <N>, Vector4d <N>, Vector4d <N>> IDivisionOperators < Vector4d <N>, Vector4d <N>, Vector4d <N>> IMultiplyOperators < Vector4d <N>, Vector4d <N>, Vector4d <N>> IEqualityOperators < Vector4d <N>, Vector4d <N>, Boolean > IAdditionOperators < Vector4d <N>, N, Vector4d <N>> ISubtractionOperators < Vector4d <N>, N, Vector4d <N>> IDivisionOperators < Vector4d <N>, N, Vector4d <N>> IMultiplyOperators < Vector4d <N>, N, Vector4d <N>> IUnaryNegationOperators < Vector4d <N>, Vector4d <N>> IUnaryPlusOperators < Vector4d <N>, Vector4d <N>> IFormattable IEquatable < Vector4d <N>> Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : NiTiS.Math Assembly : NiTiS.Math.dll Syntax public struct Vector4d<N> : IAdditionOperators<Vector4d<N>, Vector4d<N>, Vector4d<N>>, ISubtractionOperators<Vector4d<N>, Vector4d<N>, Vector4d<N>>, IDivisionOperators<Vector4d<N>, Vector4d<N>, Vector4d<N>>, IMultiplyOperators<Vector4d<N>, Vector4d<N>, Vector4d<N>>, IEqualityOperators<Vector4d<N>, Vector4d<N>, bool>, IAdditionOperators<Vector4d<N>, N, Vector4d<N>>, ISubtractionOperators<Vector4d<N>, N, Vector4d<N>>, IDivisionOperators<Vector4d<N>, N, Vector4d<N>>, IMultiplyOperators<Vector4d<N>, N, Vector4d<N>>, IUnaryNegationOperators<Vector4d<N>, Vector4d<N>>, IUnaryPlusOperators<Vector4d<N>, Vector4d<N>>, IFormattable, IEquatable<Vector4d<N>> where N : struct, INumberBase<N> Type Parameters Name Description N Constructors | Improve this Doc View Source Vector4d(N) Creates new fourth-dimensional vector with values ( xyzw , xyzw , xyzw , xyzw ) . Declaration public Vector4d(N xyzw) Parameters Type Name Description N xyzw X, Y, Z and W value of vector. | Improve this Doc View Source Vector4d(N, N, N, N) Creates new fourth-dimensional vector with values ( x , y , z , z ) . Declaration public Vector4d(N x, N y, N z, N w) Parameters Type Name Description N x X value of vector. N y Y value of vector. N z Z value of vector. N w W value of vector. | Improve this Doc View Source Vector4d(Vector2d<N>, N, N) Expands two-dimension vector to fourth-dimension. Declaration public Vector4d(Vector2d<N> base2, N z, N w) Parameters Type Name Description Vector2d <N> base2 Base vector. N z Z value. N w W value. | Improve this Doc View Source Vector4d(Vector3d<N>, N) Expands third-dimension vector to fourth-dimension. Declaration public Vector4d(Vector3d<N> base3, N w) Parameters Type Name Description Vector3d <N> base3 Base vector. N w W value. | Improve this Doc View Source Vector4d(ReadOnlySpan<N>) Creates vector by buffer. Declaration public Vector4d(ReadOnlySpan<N> data) Parameters Type Name Description ReadOnlySpan <N> data Buffer with vector data. Exceptions Type Condition ArgumentOutOfRangeException Length of data buffer not enough for creation. | Improve this Doc View Source Vector4d(ReadOnlySpan<Byte>) Creates vector by buffer. Declaration public Vector4d(ReadOnlySpan<byte> data) Parameters Type Name Description ReadOnlySpan < Byte > data Buffer with vector data. Exceptions Type Condition ArgumentOutOfRangeException Length of data buffer not enough for creation. Fields | Improve this Doc View Source ElementCount Declaration public const int ElementCount = 4 Field Value Type Description Int32 | Improve this Doc View Source W W value of vector, the fourth dimension. Declaration public N W Field Value Type Description N | Improve this Doc View Source X X value of vector, the first dimension. Declaration public N X Field Value Type Description N | Improve this Doc View Source Y Y value of vector, the second dimension. Declaration public N Y Field Value Type Description N | Improve this Doc View Source Z Z value of vector, the third dimension. Declaration public N Z Field Value Type Description N Properties | Improve this Doc View Source LengthSquared Squared magnitude of vector. Declaration public readonly N LengthSquared { get; } Property Value Type Description N | Improve this Doc View Source One Vector with all ones, (1, 1, 1, 1) . Declaration public static readonly Vector4d<N> One { get; } Property Value Type Description Vector4d <N> | Improve this Doc View Source UnitW Vector which W is one, (0, 0, 0, 1) . Declaration public static readonly Vector4d<N> UnitW { get; } Property Value Type Description Vector4d <N> | Improve this Doc View Source UnitX Vector which X is one, (1, 0, 0, 0) . Declaration public static readonly Vector4d<N> UnitX { get; } Property Value Type Description Vector4d <N> | Improve this Doc View Source UnitY Vector which Y is one, (0, 1, 0, 0) . Declaration public static readonly Vector4d<N> UnitY { get; } Property Value Type Description Vector4d <N> | Improve this Doc View Source UnitZ Vector which Z is one, (0, 0, 1, 0) . Declaration public static readonly Vector4d<N> UnitZ { get; } Property Value Type Description Vector4d <N> | Improve this Doc View Source Zero Vector with all zeros, (0, 0, 0, 0) . Declaration public static readonly Vector4d<N> Zero { get; } Property Value Type Description Vector4d <N> Methods | Improve this Doc View Source CopyTo(N[]) Declaration public readonly void CopyTo(N[] array) Parameters Type Name Description N[] array | Improve this Doc View Source CopyTo(N[], UInt32) Declaration public readonly void CopyTo(N[] array, uint offset) Parameters Type Name Description N[] array UInt32 offset | Improve this Doc View Source CopyTo(Span<N>, UInt32) Declaration public readonly void CopyTo(Span<N> array, uint offset) Parameters Type Name Description Span <N> array UInt32 offset | Improve this Doc View Source Equals(Vector4d<N>) Declaration public readonly bool Equals(Vector4d<N> other) Parameters Type Name Description Vector4d <N> other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override readonly string ToString() Returns Type Description String Overrides ValueType.ToString() | Improve this Doc View Source ToString(String) Declaration public readonly string ToString(string format) Parameters Type Name Description String format Returns Type Description String | Improve this Doc View Source ToString(String, IFormatProvider) Declaration public readonly string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description String format IFormatProvider formatProvider Returns Type Description String Operators | Improve this Doc View Source Addition(Vector4d<N>, N) Declaration public static Vector4d<N> operator +(Vector4d<N> left, N right) Parameters Type Name Description Vector4d <N> left N right Returns Type Description Vector4d <N> | Improve this Doc View Source Addition(Vector4d<N>, Vector4d<N>) Declaration public static Vector4d<N> operator +(Vector4d<N> left, Vector4d<N> right) Parameters Type Name Description Vector4d <N> left Vector4d <N> right Returns Type Description Vector4d <N> | Improve this Doc View Source Division(N, Vector4d<N>) Declaration public static Vector4d<N> operator /(N left, Vector4d<N> right) Parameters Type Name Description N left Vector4d <N> right Returns Type Description Vector4d <N> | Improve this Doc View Source Division(Vector4d<N>, N) Declaration public static Vector4d<N> operator /(Vector4d<N> left, N right) Parameters Type Name Description Vector4d <N> left N right Returns Type Description Vector4d <N> | Improve this Doc View Source Division(Vector4d<N>, Vector4d<N>) Declaration public static Vector4d<N> operator /(Vector4d<N> left, Vector4d<N> right) Parameters Type Name Description Vector4d <N> left Vector4d <N> right Returns Type Description Vector4d <N> | Improve this Doc View Source Equality(Vector4d<N>, Vector4d<N>) Declaration public static bool operator ==(Vector4d<N> left, Vector4d<N> right) Parameters Type Name Description Vector4d <N> left Vector4d <N> right Returns Type Description Boolean | Improve this Doc View Source Implicit(Vector4d<N> to Vector2d<N>) Declaration public static implicit operator Vector2d<N>(Vector4d<N> operand) Parameters Type Name Description Vector4d <N> operand Returns Type Description Vector2d <N> | Improve this Doc View Source Implicit(Vector4d<N> to Vector3d<N>) Declaration public static implicit operator Vector3d<N>(Vector4d<N> operand) Parameters Type Name Description Vector4d <N> operand Returns Type Description Vector3d <N> | Improve this Doc View Source Inequality(Vector4d<N>, Vector4d<N>) Declaration public static bool operator !=(Vector4d<N> left, Vector4d<N> right) Parameters Type Name Description Vector4d <N> left Vector4d <N> right Returns Type Description Boolean | Improve this Doc View Source Multiply(N, Vector4d<N>) Declaration public static Vector4d<N> operator *(N left, Vector4d<N> right) Parameters Type Name Description N left Vector4d <N> right Returns Type Description Vector4d <N> | Improve this Doc View Source Multiply(Vector4d<N>, N) Declaration public static Vector4d<N> operator *(Vector4d<N> left, N right) Parameters Type Name Description Vector4d <N> left N right Returns Type Description Vector4d <N> | Improve this Doc View Source Multiply(Vector4d<N>, Vector4d<N>) Declaration public static Vector4d<N> operator *(Vector4d<N> left, Vector4d<N> right) Parameters Type Name Description Vector4d <N> left Vector4d <N> right Returns Type Description Vector4d <N> | Improve this Doc View Source Subtraction(Vector4d<N>, N) Declaration public static Vector4d<N> operator -(Vector4d<N> left, N right) Parameters Type Name Description Vector4d <N> left N right Returns Type Description Vector4d <N> | Improve this Doc View Source Subtraction(Vector4d<N>, Vector4d<N>) Declaration public static Vector4d<N> operator -(Vector4d<N> left, Vector4d<N> right) Parameters Type Name Description Vector4d <N> left Vector4d <N> right Returns Type Description Vector4d <N> | Improve this Doc View Source UnaryNegation(Vector4d<N>) Declaration public static Vector4d<N> operator -(Vector4d<N> operand) Parameters Type Name Description Vector4d <N> operand Returns Type Description Vector4d <N> | Improve this Doc View Source UnaryPlus(Vector4d<N>) Declaration public static Vector4d<N> operator +(Vector4d<N> operand) Parameters Type Name Description Vector4d <N> operand Returns Type Description Vector4d <N> Implements System.Numerics.IAdditionOperators<TSelf,TOther,TResult> System.Numerics.ISubtractionOperators<TSelf,TOther,TResult> System.Numerics.IDivisionOperators<TSelf,TOther,TResult> System.Numerics.IMultiplyOperators<TSelf,TOther,TResult> System.Numerics.IEqualityOperators<TSelf,TOther,TResult> System.Numerics.IAdditionOperators<TSelf,TOther,TResult> System.Numerics.ISubtractionOperators<TSelf,TOther,TResult> System.Numerics.IDivisionOperators<TSelf,TOther,TResult> System.Numerics.IMultiplyOperators<TSelf,TOther,TResult> System.Numerics.IUnaryNegationOperators<TSelf,TResult> System.Numerics.IUnaryPlusOperators<TSelf,TResult> System.IFormattable System.IEquatable<T> Extension Methods Vector4d.ConvertToVec128<FROM, TO>(Vector4d<FROM>) Vector4d.ConvertToVec256<FROM, TO>(Vector4d<FROM>)"
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "A and B sits on tube",
    "keywords": "A and B sits on tube"
  },
  "index.html": {
    "href": "index.html",
    "title": "Main Page",
    "keywords": "Main Page"
  }
}